// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huydnt1801/chuyende/internal/ent/predicate"
	"github.com/huydnt1801/chuyende/internal/ent/trip"
	"github.com/huydnt1801/chuyende/internal/ent/user"
	"github.com/huydnt1801/chuyende/internal/ent/vehicledriver"
)

// TripUpdate is the builder for updating Trip entities.
type TripUpdate struct {
	config
	hooks    []Hook
	mutation *TripMutation
}

// Where appends a list predicates to the TripUpdate builder.
func (tu *TripUpdate) Where(ps ...predicate.Trip) *TripUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TripUpdate) SetUpdatedAt(t time.Time) *TripUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TripUpdate) SetUserID(i int) *TripUpdate {
	tu.mutation.SetUserID(i)
	return tu
}

// SetDriverID sets the "driver_id" field.
func (tu *TripUpdate) SetDriverID(i int) *TripUpdate {
	tu.mutation.SetDriverID(i)
	return tu
}

// SetNillableDriverID sets the "driver_id" field if the given value is not nil.
func (tu *TripUpdate) SetNillableDriverID(i *int) *TripUpdate {
	if i != nil {
		tu.SetDriverID(*i)
	}
	return tu
}

// ClearDriverID clears the value of the "driver_id" field.
func (tu *TripUpdate) ClearDriverID() *TripUpdate {
	tu.mutation.ClearDriverID()
	return tu
}

// SetStartX sets the "start_x" field.
func (tu *TripUpdate) SetStartX(f float64) *TripUpdate {
	tu.mutation.ResetStartX()
	tu.mutation.SetStartX(f)
	return tu
}

// AddStartX adds f to the "start_x" field.
func (tu *TripUpdate) AddStartX(f float64) *TripUpdate {
	tu.mutation.AddStartX(f)
	return tu
}

// SetStartY sets the "start_y" field.
func (tu *TripUpdate) SetStartY(f float64) *TripUpdate {
	tu.mutation.ResetStartY()
	tu.mutation.SetStartY(f)
	return tu
}

// AddStartY adds f to the "start_y" field.
func (tu *TripUpdate) AddStartY(f float64) *TripUpdate {
	tu.mutation.AddStartY(f)
	return tu
}

// SetStartLocation sets the "start_location" field.
func (tu *TripUpdate) SetStartLocation(s string) *TripUpdate {
	tu.mutation.SetStartLocation(s)
	return tu
}

// SetEndX sets the "end_x" field.
func (tu *TripUpdate) SetEndX(f float64) *TripUpdate {
	tu.mutation.ResetEndX()
	tu.mutation.SetEndX(f)
	return tu
}

// AddEndX adds f to the "end_x" field.
func (tu *TripUpdate) AddEndX(f float64) *TripUpdate {
	tu.mutation.AddEndX(f)
	return tu
}

// SetEndY sets the "end_y" field.
func (tu *TripUpdate) SetEndY(f float64) *TripUpdate {
	tu.mutation.ResetEndY()
	tu.mutation.SetEndY(f)
	return tu
}

// AddEndY adds f to the "end_y" field.
func (tu *TripUpdate) AddEndY(f float64) *TripUpdate {
	tu.mutation.AddEndY(f)
	return tu
}

// SetEndLocation sets the "end_location" field.
func (tu *TripUpdate) SetEndLocation(s string) *TripUpdate {
	tu.mutation.SetEndLocation(s)
	return tu
}

// SetDistance sets the "distance" field.
func (tu *TripUpdate) SetDistance(f float64) *TripUpdate {
	tu.mutation.ResetDistance()
	tu.mutation.SetDistance(f)
	return tu
}

// AddDistance adds f to the "distance" field.
func (tu *TripUpdate) AddDistance(f float64) *TripUpdate {
	tu.mutation.AddDistance(f)
	return tu
}

// SetPrice sets the "price" field.
func (tu *TripUpdate) SetPrice(f float64) *TripUpdate {
	tu.mutation.ResetPrice()
	tu.mutation.SetPrice(f)
	return tu
}

// AddPrice adds f to the "price" field.
func (tu *TripUpdate) AddPrice(f float64) *TripUpdate {
	tu.mutation.AddPrice(f)
	return tu
}

// SetType sets the "type" field.
func (tu *TripUpdate) SetType(t trip.Type) *TripUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TripUpdate) SetStatus(t trip.Status) *TripUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TripUpdate) SetNillableStatus(t *trip.Status) *TripUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetRate sets the "rate" field.
func (tu *TripUpdate) SetRate(i int) *TripUpdate {
	tu.mutation.ResetRate()
	tu.mutation.SetRate(i)
	return tu
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (tu *TripUpdate) SetNillableRate(i *int) *TripUpdate {
	if i != nil {
		tu.SetRate(*i)
	}
	return tu
}

// AddRate adds i to the "rate" field.
func (tu *TripUpdate) AddRate(i int) *TripUpdate {
	tu.mutation.AddRate(i)
	return tu
}

// ClearRate clears the value of the "rate" field.
func (tu *TripUpdate) ClearRate() *TripUpdate {
	tu.mutation.ClearRate()
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TripUpdate) SetUser(u *User) *TripUpdate {
	return tu.SetUserID(u.ID)
}

// SetDriver sets the "driver" edge to the VehicleDriver entity.
func (tu *TripUpdate) SetDriver(v *VehicleDriver) *TripUpdate {
	return tu.SetDriverID(v.ID)
}

// Mutation returns the TripMutation object of the builder.
func (tu *TripUpdate) Mutation() *TripMutation {
	return tu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TripUpdate) ClearUser() *TripUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearDriver clears the "driver" edge to the VehicleDriver entity.
func (tu *TripUpdate) ClearDriver() *TripUpdate {
	tu.mutation.ClearDriver()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TripUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks[int, TripMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TripUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TripUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TripUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TripUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := trip.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TripUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := trip.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Trip.type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Rate(); ok {
		if err := trip.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`ent: validator failed for field "Trip.rate": %w`, err)}
		}
	}
	if _, ok := tu.mutation.UserID(); tu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trip.user"`)
	}
	return nil
}

func (tu *TripUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trip.Table, trip.Columns, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.StartX(); ok {
		_spec.SetField(trip.FieldStartX, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedStartX(); ok {
		_spec.AddField(trip.FieldStartX, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.StartY(); ok {
		_spec.SetField(trip.FieldStartY, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedStartY(); ok {
		_spec.AddField(trip.FieldStartY, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.StartLocation(); ok {
		_spec.SetField(trip.FieldStartLocation, field.TypeString, value)
	}
	if value, ok := tu.mutation.EndX(); ok {
		_spec.SetField(trip.FieldEndX, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedEndX(); ok {
		_spec.AddField(trip.FieldEndX, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.EndY(); ok {
		_spec.SetField(trip.FieldEndY, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedEndY(); ok {
		_spec.AddField(trip.FieldEndY, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.EndLocation(); ok {
		_spec.SetField(trip.FieldEndLocation, field.TypeString, value)
	}
	if value, ok := tu.mutation.Distance(); ok {
		_spec.SetField(trip.FieldDistance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedDistance(); ok {
		_spec.AddField(trip.FieldDistance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Price(); ok {
		_spec.SetField(trip.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedPrice(); ok {
		_spec.AddField(trip.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(trip.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Rate(); ok {
		_spec.SetField(trip.FieldRate, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedRate(); ok {
		_spec.AddField(trip.FieldRate, field.TypeInt, value)
	}
	if tu.mutation.RateCleared() {
		_spec.ClearField(trip.FieldRate, field.TypeInt)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TripUpdateOne is the builder for updating a single Trip entity.
type TripUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TripMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TripUpdateOne) SetUpdatedAt(t time.Time) *TripUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *TripUpdateOne) SetUserID(i int) *TripUpdateOne {
	tuo.mutation.SetUserID(i)
	return tuo
}

// SetDriverID sets the "driver_id" field.
func (tuo *TripUpdateOne) SetDriverID(i int) *TripUpdateOne {
	tuo.mutation.SetDriverID(i)
	return tuo
}

// SetNillableDriverID sets the "driver_id" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableDriverID(i *int) *TripUpdateOne {
	if i != nil {
		tuo.SetDriverID(*i)
	}
	return tuo
}

// ClearDriverID clears the value of the "driver_id" field.
func (tuo *TripUpdateOne) ClearDriverID() *TripUpdateOne {
	tuo.mutation.ClearDriverID()
	return tuo
}

// SetStartX sets the "start_x" field.
func (tuo *TripUpdateOne) SetStartX(f float64) *TripUpdateOne {
	tuo.mutation.ResetStartX()
	tuo.mutation.SetStartX(f)
	return tuo
}

// AddStartX adds f to the "start_x" field.
func (tuo *TripUpdateOne) AddStartX(f float64) *TripUpdateOne {
	tuo.mutation.AddStartX(f)
	return tuo
}

// SetStartY sets the "start_y" field.
func (tuo *TripUpdateOne) SetStartY(f float64) *TripUpdateOne {
	tuo.mutation.ResetStartY()
	tuo.mutation.SetStartY(f)
	return tuo
}

// AddStartY adds f to the "start_y" field.
func (tuo *TripUpdateOne) AddStartY(f float64) *TripUpdateOne {
	tuo.mutation.AddStartY(f)
	return tuo
}

// SetStartLocation sets the "start_location" field.
func (tuo *TripUpdateOne) SetStartLocation(s string) *TripUpdateOne {
	tuo.mutation.SetStartLocation(s)
	return tuo
}

// SetEndX sets the "end_x" field.
func (tuo *TripUpdateOne) SetEndX(f float64) *TripUpdateOne {
	tuo.mutation.ResetEndX()
	tuo.mutation.SetEndX(f)
	return tuo
}

// AddEndX adds f to the "end_x" field.
func (tuo *TripUpdateOne) AddEndX(f float64) *TripUpdateOne {
	tuo.mutation.AddEndX(f)
	return tuo
}

// SetEndY sets the "end_y" field.
func (tuo *TripUpdateOne) SetEndY(f float64) *TripUpdateOne {
	tuo.mutation.ResetEndY()
	tuo.mutation.SetEndY(f)
	return tuo
}

// AddEndY adds f to the "end_y" field.
func (tuo *TripUpdateOne) AddEndY(f float64) *TripUpdateOne {
	tuo.mutation.AddEndY(f)
	return tuo
}

// SetEndLocation sets the "end_location" field.
func (tuo *TripUpdateOne) SetEndLocation(s string) *TripUpdateOne {
	tuo.mutation.SetEndLocation(s)
	return tuo
}

// SetDistance sets the "distance" field.
func (tuo *TripUpdateOne) SetDistance(f float64) *TripUpdateOne {
	tuo.mutation.ResetDistance()
	tuo.mutation.SetDistance(f)
	return tuo
}

// AddDistance adds f to the "distance" field.
func (tuo *TripUpdateOne) AddDistance(f float64) *TripUpdateOne {
	tuo.mutation.AddDistance(f)
	return tuo
}

// SetPrice sets the "price" field.
func (tuo *TripUpdateOne) SetPrice(f float64) *TripUpdateOne {
	tuo.mutation.ResetPrice()
	tuo.mutation.SetPrice(f)
	return tuo
}

// AddPrice adds f to the "price" field.
func (tuo *TripUpdateOne) AddPrice(f float64) *TripUpdateOne {
	tuo.mutation.AddPrice(f)
	return tuo
}

// SetType sets the "type" field.
func (tuo *TripUpdateOne) SetType(t trip.Type) *TripUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TripUpdateOne) SetStatus(t trip.Status) *TripUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableStatus(t *trip.Status) *TripUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetRate sets the "rate" field.
func (tuo *TripUpdateOne) SetRate(i int) *TripUpdateOne {
	tuo.mutation.ResetRate()
	tuo.mutation.SetRate(i)
	return tuo
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableRate(i *int) *TripUpdateOne {
	if i != nil {
		tuo.SetRate(*i)
	}
	return tuo
}

// AddRate adds i to the "rate" field.
func (tuo *TripUpdateOne) AddRate(i int) *TripUpdateOne {
	tuo.mutation.AddRate(i)
	return tuo
}

// ClearRate clears the value of the "rate" field.
func (tuo *TripUpdateOne) ClearRate() *TripUpdateOne {
	tuo.mutation.ClearRate()
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TripUpdateOne) SetUser(u *User) *TripUpdateOne {
	return tuo.SetUserID(u.ID)
}

// SetDriver sets the "driver" edge to the VehicleDriver entity.
func (tuo *TripUpdateOne) SetDriver(v *VehicleDriver) *TripUpdateOne {
	return tuo.SetDriverID(v.ID)
}

// Mutation returns the TripMutation object of the builder.
func (tuo *TripUpdateOne) Mutation() *TripMutation {
	return tuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TripUpdateOne) ClearUser() *TripUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearDriver clears the "driver" edge to the VehicleDriver entity.
func (tuo *TripUpdateOne) ClearDriver() *TripUpdateOne {
	tuo.mutation.ClearDriver()
	return tuo
}

// Where appends a list predicates to the TripUpdate builder.
func (tuo *TripUpdateOne) Where(ps ...predicate.Trip) *TripUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TripUpdateOne) Select(field string, fields ...string) *TripUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Trip entity.
func (tuo *TripUpdateOne) Save(ctx context.Context) (*Trip, error) {
	tuo.defaults()
	return withHooks[*Trip, TripMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TripUpdateOne) SaveX(ctx context.Context) *Trip {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TripUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TripUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TripUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := trip.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TripUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := trip.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Trip.type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Rate(); ok {
		if err := trip.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`ent: validator failed for field "Trip.rate": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.UserID(); tuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Trip.user"`)
	}
	return nil
}

func (tuo *TripUpdateOne) sqlSave(ctx context.Context) (_node *Trip, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trip.Table, trip.Columns, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Trip.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trip.FieldID)
		for _, f := range fields {
			if !trip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.StartX(); ok {
		_spec.SetField(trip.FieldStartX, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedStartX(); ok {
		_spec.AddField(trip.FieldStartX, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.StartY(); ok {
		_spec.SetField(trip.FieldStartY, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedStartY(); ok {
		_spec.AddField(trip.FieldStartY, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.StartLocation(); ok {
		_spec.SetField(trip.FieldStartLocation, field.TypeString, value)
	}
	if value, ok := tuo.mutation.EndX(); ok {
		_spec.SetField(trip.FieldEndX, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedEndX(); ok {
		_spec.AddField(trip.FieldEndX, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.EndY(); ok {
		_spec.SetField(trip.FieldEndY, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedEndY(); ok {
		_spec.AddField(trip.FieldEndY, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.EndLocation(); ok {
		_spec.SetField(trip.FieldEndLocation, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Distance(); ok {
		_spec.SetField(trip.FieldDistance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedDistance(); ok {
		_spec.AddField(trip.FieldDistance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Price(); ok {
		_spec.SetField(trip.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedPrice(); ok {
		_spec.AddField(trip.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(trip.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Rate(); ok {
		_spec.SetField(trip.FieldRate, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedRate(); ok {
		_spec.AddField(trip.FieldRate, field.TypeInt, value)
	}
	if tuo.mutation.RateCleared() {
		_spec.ClearField(trip.FieldRate, field.TypeInt)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Trip{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
