// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huydnt1801/chuyende/internal/ent/otp"
)

// OtpCreate is the builder for creating a Otp entity.
type OtpCreate struct {
	config
	mutation *OtpMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPhoneNumber sets the "phone_number" field.
func (oc *OtpCreate) SetPhoneNumber(s string) *OtpCreate {
	oc.mutation.SetPhoneNumber(s)
	return oc
}

// SetOtp sets the "otp" field.
func (oc *OtpCreate) SetOtp(s string) *OtpCreate {
	oc.mutation.SetOtp(s)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OtpCreate) SetCreatedAt(t time.Time) *OtpCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OtpCreate) SetNillableCreatedAt(t *time.Time) *OtpCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// Mutation returns the OtpMutation object of the builder.
func (oc *OtpCreate) Mutation() *OtpMutation {
	return oc.mutation
}

// Save creates the Otp in the database.
func (oc *OtpCreate) Save(ctx context.Context) (*Otp, error) {
	oc.defaults()
	return withHooks[*Otp, OtpMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OtpCreate) SaveX(ctx context.Context) *Otp {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OtpCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OtpCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OtpCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := otp.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OtpCreate) check() error {
	if _, ok := oc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Otp.phone_number"`)}
	}
	if _, ok := oc.mutation.Otp(); !ok {
		return &ValidationError{Name: "otp", err: errors.New(`ent: missing required field "Otp.otp"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Otp.created_at"`)}
	}
	return nil
}

func (oc *OtpCreate) sqlSave(ctx context.Context) (*Otp, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OtpCreate) createSpec() (*Otp, *sqlgraph.CreateSpec) {
	var (
		_node = &Otp{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(otp.Table, sqlgraph.NewFieldSpec(otp.FieldID, field.TypeInt))
	)
	_spec.OnConflict = oc.conflict
	if value, ok := oc.mutation.PhoneNumber(); ok {
		_spec.SetField(otp.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := oc.mutation.Otp(); ok {
		_spec.SetField(otp.FieldOtp, field.TypeString, value)
		_node.Otp = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(otp.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Otp.Create().
//		SetPhoneNumber(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OtpUpsert) {
//			SetPhoneNumber(v+v).
//		}).
//		Exec(ctx)
func (oc *OtpCreate) OnConflict(opts ...sql.ConflictOption) *OtpUpsertOne {
	oc.conflict = opts
	return &OtpUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Otp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OtpCreate) OnConflictColumns(columns ...string) *OtpUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OtpUpsertOne{
		create: oc,
	}
}

type (
	// OtpUpsertOne is the builder for "upsert"-ing
	//  one Otp node.
	OtpUpsertOne struct {
		create *OtpCreate
	}

	// OtpUpsert is the "OnConflict" setter.
	OtpUpsert struct {
		*sql.UpdateSet
	}
)

// SetPhoneNumber sets the "phone_number" field.
func (u *OtpUpsert) SetPhoneNumber(v string) *OtpUpsert {
	u.Set(otp.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *OtpUpsert) UpdatePhoneNumber() *OtpUpsert {
	u.SetExcluded(otp.FieldPhoneNumber)
	return u
}

// SetOtp sets the "otp" field.
func (u *OtpUpsert) SetOtp(v string) *OtpUpsert {
	u.Set(otp.FieldOtp, v)
	return u
}

// UpdateOtp sets the "otp" field to the value that was provided on create.
func (u *OtpUpsert) UpdateOtp() *OtpUpsert {
	u.SetExcluded(otp.FieldOtp)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OtpUpsert) SetCreatedAt(v time.Time) *OtpUpsert {
	u.Set(otp.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OtpUpsert) UpdateCreatedAt() *OtpUpsert {
	u.SetExcluded(otp.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Otp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OtpUpsertOne) UpdateNewValues() *OtpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Otp.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OtpUpsertOne) Ignore() *OtpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OtpUpsertOne) DoNothing() *OtpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OtpCreate.OnConflict
// documentation for more info.
func (u *OtpUpsertOne) Update(set func(*OtpUpsert)) *OtpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OtpUpsert{UpdateSet: update})
	}))
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *OtpUpsertOne) SetPhoneNumber(v string) *OtpUpsertOne {
	return u.Update(func(s *OtpUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *OtpUpsertOne) UpdatePhoneNumber() *OtpUpsertOne {
	return u.Update(func(s *OtpUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetOtp sets the "otp" field.
func (u *OtpUpsertOne) SetOtp(v string) *OtpUpsertOne {
	return u.Update(func(s *OtpUpsert) {
		s.SetOtp(v)
	})
}

// UpdateOtp sets the "otp" field to the value that was provided on create.
func (u *OtpUpsertOne) UpdateOtp() *OtpUpsertOne {
	return u.Update(func(s *OtpUpsert) {
		s.UpdateOtp()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OtpUpsertOne) SetCreatedAt(v time.Time) *OtpUpsertOne {
	return u.Update(func(s *OtpUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OtpUpsertOne) UpdateCreatedAt() *OtpUpsertOne {
	return u.Update(func(s *OtpUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *OtpUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OtpCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OtpUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OtpUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OtpUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OtpCreateBulk is the builder for creating many Otp entities in bulk.
type OtpCreateBulk struct {
	config
	builders []*OtpCreate
	conflict []sql.ConflictOption
}

// Save creates the Otp entities in the database.
func (ocb *OtpCreateBulk) Save(ctx context.Context) ([]*Otp, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Otp, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OtpMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OtpCreateBulk) SaveX(ctx context.Context) []*Otp {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OtpCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OtpCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Otp.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OtpUpsert) {
//			SetPhoneNumber(v+v).
//		}).
//		Exec(ctx)
func (ocb *OtpCreateBulk) OnConflict(opts ...sql.ConflictOption) *OtpUpsertBulk {
	ocb.conflict = opts
	return &OtpUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Otp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OtpCreateBulk) OnConflictColumns(columns ...string) *OtpUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OtpUpsertBulk{
		create: ocb,
	}
}

// OtpUpsertBulk is the builder for "upsert"-ing
// a bulk of Otp nodes.
type OtpUpsertBulk struct {
	create *OtpCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Otp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OtpUpsertBulk) UpdateNewValues() *OtpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Otp.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OtpUpsertBulk) Ignore() *OtpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OtpUpsertBulk) DoNothing() *OtpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OtpCreateBulk.OnConflict
// documentation for more info.
func (u *OtpUpsertBulk) Update(set func(*OtpUpsert)) *OtpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OtpUpsert{UpdateSet: update})
	}))
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *OtpUpsertBulk) SetPhoneNumber(v string) *OtpUpsertBulk {
	return u.Update(func(s *OtpUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *OtpUpsertBulk) UpdatePhoneNumber() *OtpUpsertBulk {
	return u.Update(func(s *OtpUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetOtp sets the "otp" field.
func (u *OtpUpsertBulk) SetOtp(v string) *OtpUpsertBulk {
	return u.Update(func(s *OtpUpsert) {
		s.SetOtp(v)
	})
}

// UpdateOtp sets the "otp" field to the value that was provided on create.
func (u *OtpUpsertBulk) UpdateOtp() *OtpUpsertBulk {
	return u.Update(func(s *OtpUpsert) {
		s.UpdateOtp()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OtpUpsertBulk) SetCreatedAt(v time.Time) *OtpUpsertBulk {
	return u.Update(func(s *OtpUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OtpUpsertBulk) UpdateCreatedAt() *OtpUpsertBulk {
	return u.Update(func(s *OtpUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *OtpUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OtpCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OtpCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OtpUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
