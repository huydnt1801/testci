// Code generated by ent, DO NOT EDIT.

package otp

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/huydnt1801/chuyende/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Otp {
	return predicate.Otp(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Otp {
	return predicate.Otp(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Otp {
	return predicate.Otp(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Otp {
	return predicate.Otp(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Otp {
	return predicate.Otp(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Otp {
	return predicate.Otp(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Otp {
	return predicate.Otp(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Otp {
	return predicate.Otp(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Otp {
	return predicate.Otp(sql.FieldLTE(FieldID, id))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.Otp {
	return predicate.Otp(sql.FieldEQ(FieldPhoneNumber, v))
}

// Otp applies equality check predicate on the "otp" field. It's identical to OtpEQ.
func Otp(v string) predicate.Otp {
	return predicate.Otp(sql.FieldEQ(FieldOtp, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldEQ(FieldCreatedAt, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.Otp {
	return predicate.Otp(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.Otp {
	return predicate.Otp(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.Otp {
	return predicate.Otp(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.Otp {
	return predicate.Otp(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.Otp {
	return predicate.Otp(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.Otp {
	return predicate.Otp(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.Otp {
	return predicate.Otp(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.Otp {
	return predicate.Otp(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.Otp {
	return predicate.Otp(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.Otp {
	return predicate.Otp(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.Otp {
	return predicate.Otp(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.Otp {
	return predicate.Otp(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.Otp {
	return predicate.Otp(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// OtpEQ applies the EQ predicate on the "otp" field.
func OtpEQ(v string) predicate.Otp {
	return predicate.Otp(sql.FieldEQ(FieldOtp, v))
}

// OtpNEQ applies the NEQ predicate on the "otp" field.
func OtpNEQ(v string) predicate.Otp {
	return predicate.Otp(sql.FieldNEQ(FieldOtp, v))
}

// OtpIn applies the In predicate on the "otp" field.
func OtpIn(vs ...string) predicate.Otp {
	return predicate.Otp(sql.FieldIn(FieldOtp, vs...))
}

// OtpNotIn applies the NotIn predicate on the "otp" field.
func OtpNotIn(vs ...string) predicate.Otp {
	return predicate.Otp(sql.FieldNotIn(FieldOtp, vs...))
}

// OtpGT applies the GT predicate on the "otp" field.
func OtpGT(v string) predicate.Otp {
	return predicate.Otp(sql.FieldGT(FieldOtp, v))
}

// OtpGTE applies the GTE predicate on the "otp" field.
func OtpGTE(v string) predicate.Otp {
	return predicate.Otp(sql.FieldGTE(FieldOtp, v))
}

// OtpLT applies the LT predicate on the "otp" field.
func OtpLT(v string) predicate.Otp {
	return predicate.Otp(sql.FieldLT(FieldOtp, v))
}

// OtpLTE applies the LTE predicate on the "otp" field.
func OtpLTE(v string) predicate.Otp {
	return predicate.Otp(sql.FieldLTE(FieldOtp, v))
}

// OtpContains applies the Contains predicate on the "otp" field.
func OtpContains(v string) predicate.Otp {
	return predicate.Otp(sql.FieldContains(FieldOtp, v))
}

// OtpHasPrefix applies the HasPrefix predicate on the "otp" field.
func OtpHasPrefix(v string) predicate.Otp {
	return predicate.Otp(sql.FieldHasPrefix(FieldOtp, v))
}

// OtpHasSuffix applies the HasSuffix predicate on the "otp" field.
func OtpHasSuffix(v string) predicate.Otp {
	return predicate.Otp(sql.FieldHasSuffix(FieldOtp, v))
}

// OtpEqualFold applies the EqualFold predicate on the "otp" field.
func OtpEqualFold(v string) predicate.Otp {
	return predicate.Otp(sql.FieldEqualFold(FieldOtp, v))
}

// OtpContainsFold applies the ContainsFold predicate on the "otp" field.
func OtpContainsFold(v string) predicate.Otp {
	return predicate.Otp(sql.FieldContainsFold(FieldOtp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Otp {
	return predicate.Otp(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Otp) predicate.Otp {
	return predicate.Otp(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Otp) predicate.Otp {
	return predicate.Otp(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Otp) predicate.Otp {
	return predicate.Otp(func(s *sql.Selector) {
		p(s.Not())
	})
}
