// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huydnt1801/chuyende/internal/ent/trip"
	"github.com/huydnt1801/chuyende/internal/ent/user"
	"github.com/huydnt1801/chuyende/internal/ent/vehicledriver"
)

// TripCreate is the builder for creating a Trip entity.
type TripCreate struct {
	config
	mutation *TripMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TripCreate) SetCreatedAt(t time.Time) *TripCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableCreatedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TripCreate) SetUpdatedAt(t time.Time) *TripCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableUpdatedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetUserID sets the "user_id" field.
func (tc *TripCreate) SetUserID(i int) *TripCreate {
	tc.mutation.SetUserID(i)
	return tc
}

// SetDriverID sets the "driver_id" field.
func (tc *TripCreate) SetDriverID(i int) *TripCreate {
	tc.mutation.SetDriverID(i)
	return tc
}

// SetNillableDriverID sets the "driver_id" field if the given value is not nil.
func (tc *TripCreate) SetNillableDriverID(i *int) *TripCreate {
	if i != nil {
		tc.SetDriverID(*i)
	}
	return tc
}

// SetStartX sets the "start_x" field.
func (tc *TripCreate) SetStartX(f float64) *TripCreate {
	tc.mutation.SetStartX(f)
	return tc
}

// SetStartY sets the "start_y" field.
func (tc *TripCreate) SetStartY(f float64) *TripCreate {
	tc.mutation.SetStartY(f)
	return tc
}

// SetStartLocation sets the "start_location" field.
func (tc *TripCreate) SetStartLocation(s string) *TripCreate {
	tc.mutation.SetStartLocation(s)
	return tc
}

// SetEndX sets the "end_x" field.
func (tc *TripCreate) SetEndX(f float64) *TripCreate {
	tc.mutation.SetEndX(f)
	return tc
}

// SetEndY sets the "end_y" field.
func (tc *TripCreate) SetEndY(f float64) *TripCreate {
	tc.mutation.SetEndY(f)
	return tc
}

// SetEndLocation sets the "end_location" field.
func (tc *TripCreate) SetEndLocation(s string) *TripCreate {
	tc.mutation.SetEndLocation(s)
	return tc
}

// SetDistance sets the "distance" field.
func (tc *TripCreate) SetDistance(f float64) *TripCreate {
	tc.mutation.SetDistance(f)
	return tc
}

// SetPrice sets the "price" field.
func (tc *TripCreate) SetPrice(f float64) *TripCreate {
	tc.mutation.SetPrice(f)
	return tc
}

// SetType sets the "type" field.
func (tc *TripCreate) SetType(t trip.Type) *TripCreate {
	tc.mutation.SetType(t)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TripCreate) SetStatus(t trip.Status) *TripCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TripCreate) SetNillableStatus(t *trip.Status) *TripCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetRate sets the "rate" field.
func (tc *TripCreate) SetRate(i int) *TripCreate {
	tc.mutation.SetRate(i)
	return tc
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (tc *TripCreate) SetNillableRate(i *int) *TripCreate {
	if i != nil {
		tc.SetRate(*i)
	}
	return tc
}

// SetUser sets the "user" edge to the User entity.
func (tc *TripCreate) SetUser(u *User) *TripCreate {
	return tc.SetUserID(u.ID)
}

// SetDriver sets the "driver" edge to the VehicleDriver entity.
func (tc *TripCreate) SetDriver(v *VehicleDriver) *TripCreate {
	return tc.SetDriverID(v.ID)
}

// Mutation returns the TripMutation object of the builder.
func (tc *TripCreate) Mutation() *TripMutation {
	return tc.mutation
}

// Save creates the Trip in the database.
func (tc *TripCreate) Save(ctx context.Context) (*Trip, error) {
	tc.defaults()
	return withHooks[*Trip, TripMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TripCreate) SaveX(ctx context.Context) *Trip {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TripCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TripCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TripCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := trip.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := trip.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := trip.DefaultStatus
		tc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TripCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Trip.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Trip.updated_at"`)}
	}
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Trip.user_id"`)}
	}
	if _, ok := tc.mutation.StartX(); !ok {
		return &ValidationError{Name: "start_x", err: errors.New(`ent: missing required field "Trip.start_x"`)}
	}
	if _, ok := tc.mutation.StartY(); !ok {
		return &ValidationError{Name: "start_y", err: errors.New(`ent: missing required field "Trip.start_y"`)}
	}
	if _, ok := tc.mutation.StartLocation(); !ok {
		return &ValidationError{Name: "start_location", err: errors.New(`ent: missing required field "Trip.start_location"`)}
	}
	if _, ok := tc.mutation.EndX(); !ok {
		return &ValidationError{Name: "end_x", err: errors.New(`ent: missing required field "Trip.end_x"`)}
	}
	if _, ok := tc.mutation.EndY(); !ok {
		return &ValidationError{Name: "end_y", err: errors.New(`ent: missing required field "Trip.end_y"`)}
	}
	if _, ok := tc.mutation.EndLocation(); !ok {
		return &ValidationError{Name: "end_location", err: errors.New(`ent: missing required field "Trip.end_location"`)}
	}
	if _, ok := tc.mutation.Distance(); !ok {
		return &ValidationError{Name: "distance", err: errors.New(`ent: missing required field "Trip.distance"`)}
	}
	if _, ok := tc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Trip.price"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Trip.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := trip.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Trip.type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Trip.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	if v, ok := tc.mutation.Rate(); ok {
		if err := trip.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`ent: validator failed for field "Trip.rate": %w`, err)}
		}
	}
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Trip.user"`)}
	}
	return nil
}

func (tc *TripCreate) sqlSave(ctx context.Context) (*Trip, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TripCreate) createSpec() (*Trip, *sqlgraph.CreateSpec) {
	var (
		_node = &Trip{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(trip.Table, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(trip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.StartX(); ok {
		_spec.SetField(trip.FieldStartX, field.TypeFloat64, value)
		_node.StartX = value
	}
	if value, ok := tc.mutation.StartY(); ok {
		_spec.SetField(trip.FieldStartY, field.TypeFloat64, value)
		_node.StartY = value
	}
	if value, ok := tc.mutation.StartLocation(); ok {
		_spec.SetField(trip.FieldStartLocation, field.TypeString, value)
		_node.StartLocation = value
	}
	if value, ok := tc.mutation.EndX(); ok {
		_spec.SetField(trip.FieldEndX, field.TypeFloat64, value)
		_node.EndX = value
	}
	if value, ok := tc.mutation.EndY(); ok {
		_spec.SetField(trip.FieldEndY, field.TypeFloat64, value)
		_node.EndY = value
	}
	if value, ok := tc.mutation.EndLocation(); ok {
		_spec.SetField(trip.FieldEndLocation, field.TypeString, value)
		_node.EndLocation = value
	}
	if value, ok := tc.mutation.Distance(); ok {
		_spec.SetField(trip.FieldDistance, field.TypeFloat64, value)
		_node.Distance = value
	}
	if value, ok := tc.mutation.Price(); ok {
		_spec.SetField(trip.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(trip.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Rate(); ok {
		_spec.SetField(trip.FieldRate, field.TypeInt, value)
		_node.Rate = value
	}
	if nodes := tc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DriverID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Trip.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TripUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TripCreate) OnConflict(opts ...sql.ConflictOption) *TripUpsertOne {
	tc.conflict = opts
	return &TripUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Trip.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TripCreate) OnConflictColumns(columns ...string) *TripUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TripUpsertOne{
		create: tc,
	}
}

type (
	// TripUpsertOne is the builder for "upsert"-ing
	//  one Trip node.
	TripUpsertOne struct {
		create *TripCreate
	}

	// TripUpsert is the "OnConflict" setter.
	TripUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TripUpsert) SetUpdatedAt(v time.Time) *TripUpsert {
	u.Set(trip.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TripUpsert) UpdateUpdatedAt() *TripUpsert {
	u.SetExcluded(trip.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *TripUpsert) SetUserID(v int) *TripUpsert {
	u.Set(trip.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TripUpsert) UpdateUserID() *TripUpsert {
	u.SetExcluded(trip.FieldUserID)
	return u
}

// SetDriverID sets the "driver_id" field.
func (u *TripUpsert) SetDriverID(v int) *TripUpsert {
	u.Set(trip.FieldDriverID, v)
	return u
}

// UpdateDriverID sets the "driver_id" field to the value that was provided on create.
func (u *TripUpsert) UpdateDriverID() *TripUpsert {
	u.SetExcluded(trip.FieldDriverID)
	return u
}

// ClearDriverID clears the value of the "driver_id" field.
func (u *TripUpsert) ClearDriverID() *TripUpsert {
	u.SetNull(trip.FieldDriverID)
	return u
}

// SetStartX sets the "start_x" field.
func (u *TripUpsert) SetStartX(v float64) *TripUpsert {
	u.Set(trip.FieldStartX, v)
	return u
}

// UpdateStartX sets the "start_x" field to the value that was provided on create.
func (u *TripUpsert) UpdateStartX() *TripUpsert {
	u.SetExcluded(trip.FieldStartX)
	return u
}

// AddStartX adds v to the "start_x" field.
func (u *TripUpsert) AddStartX(v float64) *TripUpsert {
	u.Add(trip.FieldStartX, v)
	return u
}

// SetStartY sets the "start_y" field.
func (u *TripUpsert) SetStartY(v float64) *TripUpsert {
	u.Set(trip.FieldStartY, v)
	return u
}

// UpdateStartY sets the "start_y" field to the value that was provided on create.
func (u *TripUpsert) UpdateStartY() *TripUpsert {
	u.SetExcluded(trip.FieldStartY)
	return u
}

// AddStartY adds v to the "start_y" field.
func (u *TripUpsert) AddStartY(v float64) *TripUpsert {
	u.Add(trip.FieldStartY, v)
	return u
}

// SetStartLocation sets the "start_location" field.
func (u *TripUpsert) SetStartLocation(v string) *TripUpsert {
	u.Set(trip.FieldStartLocation, v)
	return u
}

// UpdateStartLocation sets the "start_location" field to the value that was provided on create.
func (u *TripUpsert) UpdateStartLocation() *TripUpsert {
	u.SetExcluded(trip.FieldStartLocation)
	return u
}

// SetEndX sets the "end_x" field.
func (u *TripUpsert) SetEndX(v float64) *TripUpsert {
	u.Set(trip.FieldEndX, v)
	return u
}

// UpdateEndX sets the "end_x" field to the value that was provided on create.
func (u *TripUpsert) UpdateEndX() *TripUpsert {
	u.SetExcluded(trip.FieldEndX)
	return u
}

// AddEndX adds v to the "end_x" field.
func (u *TripUpsert) AddEndX(v float64) *TripUpsert {
	u.Add(trip.FieldEndX, v)
	return u
}

// SetEndY sets the "end_y" field.
func (u *TripUpsert) SetEndY(v float64) *TripUpsert {
	u.Set(trip.FieldEndY, v)
	return u
}

// UpdateEndY sets the "end_y" field to the value that was provided on create.
func (u *TripUpsert) UpdateEndY() *TripUpsert {
	u.SetExcluded(trip.FieldEndY)
	return u
}

// AddEndY adds v to the "end_y" field.
func (u *TripUpsert) AddEndY(v float64) *TripUpsert {
	u.Add(trip.FieldEndY, v)
	return u
}

// SetEndLocation sets the "end_location" field.
func (u *TripUpsert) SetEndLocation(v string) *TripUpsert {
	u.Set(trip.FieldEndLocation, v)
	return u
}

// UpdateEndLocation sets the "end_location" field to the value that was provided on create.
func (u *TripUpsert) UpdateEndLocation() *TripUpsert {
	u.SetExcluded(trip.FieldEndLocation)
	return u
}

// SetDistance sets the "distance" field.
func (u *TripUpsert) SetDistance(v float64) *TripUpsert {
	u.Set(trip.FieldDistance, v)
	return u
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *TripUpsert) UpdateDistance() *TripUpsert {
	u.SetExcluded(trip.FieldDistance)
	return u
}

// AddDistance adds v to the "distance" field.
func (u *TripUpsert) AddDistance(v float64) *TripUpsert {
	u.Add(trip.FieldDistance, v)
	return u
}

// SetPrice sets the "price" field.
func (u *TripUpsert) SetPrice(v float64) *TripUpsert {
	u.Set(trip.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *TripUpsert) UpdatePrice() *TripUpsert {
	u.SetExcluded(trip.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *TripUpsert) AddPrice(v float64) *TripUpsert {
	u.Add(trip.FieldPrice, v)
	return u
}

// SetType sets the "type" field.
func (u *TripUpsert) SetType(v trip.Type) *TripUpsert {
	u.Set(trip.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TripUpsert) UpdateType() *TripUpsert {
	u.SetExcluded(trip.FieldType)
	return u
}

// SetStatus sets the "status" field.
func (u *TripUpsert) SetStatus(v trip.Status) *TripUpsert {
	u.Set(trip.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TripUpsert) UpdateStatus() *TripUpsert {
	u.SetExcluded(trip.FieldStatus)
	return u
}

// SetRate sets the "rate" field.
func (u *TripUpsert) SetRate(v int) *TripUpsert {
	u.Set(trip.FieldRate, v)
	return u
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *TripUpsert) UpdateRate() *TripUpsert {
	u.SetExcluded(trip.FieldRate)
	return u
}

// AddRate adds v to the "rate" field.
func (u *TripUpsert) AddRate(v int) *TripUpsert {
	u.Add(trip.FieldRate, v)
	return u
}

// ClearRate clears the value of the "rate" field.
func (u *TripUpsert) ClearRate() *TripUpsert {
	u.SetNull(trip.FieldRate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Trip.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TripUpsertOne) UpdateNewValues() *TripUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(trip.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Trip.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TripUpsertOne) Ignore() *TripUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TripUpsertOne) DoNothing() *TripUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TripCreate.OnConflict
// documentation for more info.
func (u *TripUpsertOne) Update(set func(*TripUpsert)) *TripUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TripUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TripUpsertOne) SetUpdatedAt(v time.Time) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateUpdatedAt() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *TripUpsertOne) SetUserID(v int) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateUserID() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateUserID()
	})
}

// SetDriverID sets the "driver_id" field.
func (u *TripUpsertOne) SetDriverID(v int) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetDriverID(v)
	})
}

// UpdateDriverID sets the "driver_id" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateDriverID() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateDriverID()
	})
}

// ClearDriverID clears the value of the "driver_id" field.
func (u *TripUpsertOne) ClearDriverID() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.ClearDriverID()
	})
}

// SetStartX sets the "start_x" field.
func (u *TripUpsertOne) SetStartX(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetStartX(v)
	})
}

// AddStartX adds v to the "start_x" field.
func (u *TripUpsertOne) AddStartX(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.AddStartX(v)
	})
}

// UpdateStartX sets the "start_x" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateStartX() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateStartX()
	})
}

// SetStartY sets the "start_y" field.
func (u *TripUpsertOne) SetStartY(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetStartY(v)
	})
}

// AddStartY adds v to the "start_y" field.
func (u *TripUpsertOne) AddStartY(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.AddStartY(v)
	})
}

// UpdateStartY sets the "start_y" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateStartY() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateStartY()
	})
}

// SetStartLocation sets the "start_location" field.
func (u *TripUpsertOne) SetStartLocation(v string) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetStartLocation(v)
	})
}

// UpdateStartLocation sets the "start_location" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateStartLocation() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateStartLocation()
	})
}

// SetEndX sets the "end_x" field.
func (u *TripUpsertOne) SetEndX(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetEndX(v)
	})
}

// AddEndX adds v to the "end_x" field.
func (u *TripUpsertOne) AddEndX(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.AddEndX(v)
	})
}

// UpdateEndX sets the "end_x" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateEndX() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateEndX()
	})
}

// SetEndY sets the "end_y" field.
func (u *TripUpsertOne) SetEndY(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetEndY(v)
	})
}

// AddEndY adds v to the "end_y" field.
func (u *TripUpsertOne) AddEndY(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.AddEndY(v)
	})
}

// UpdateEndY sets the "end_y" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateEndY() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateEndY()
	})
}

// SetEndLocation sets the "end_location" field.
func (u *TripUpsertOne) SetEndLocation(v string) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetEndLocation(v)
	})
}

// UpdateEndLocation sets the "end_location" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateEndLocation() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateEndLocation()
	})
}

// SetDistance sets the "distance" field.
func (u *TripUpsertOne) SetDistance(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetDistance(v)
	})
}

// AddDistance adds v to the "distance" field.
func (u *TripUpsertOne) AddDistance(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.AddDistance(v)
	})
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateDistance() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateDistance()
	})
}

// SetPrice sets the "price" field.
func (u *TripUpsertOne) SetPrice(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *TripUpsertOne) AddPrice(v float64) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *TripUpsertOne) UpdatePrice() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdatePrice()
	})
}

// SetType sets the "type" field.
func (u *TripUpsertOne) SetType(v trip.Type) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateType() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *TripUpsertOne) SetStatus(v trip.Status) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateStatus() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateStatus()
	})
}

// SetRate sets the "rate" field.
func (u *TripUpsertOne) SetRate(v int) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.SetRate(v)
	})
}

// AddRate adds v to the "rate" field.
func (u *TripUpsertOne) AddRate(v int) *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.AddRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *TripUpsertOne) UpdateRate() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.UpdateRate()
	})
}

// ClearRate clears the value of the "rate" field.
func (u *TripUpsertOne) ClearRate() *TripUpsertOne {
	return u.Update(func(s *TripUpsert) {
		s.ClearRate()
	})
}

// Exec executes the query.
func (u *TripUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TripCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TripUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TripUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TripUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TripCreateBulk is the builder for creating many Trip entities in bulk.
type TripCreateBulk struct {
	config
	builders []*TripCreate
	conflict []sql.ConflictOption
}

// Save creates the Trip entities in the database.
func (tcb *TripCreateBulk) Save(ctx context.Context) ([]*Trip, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Trip, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TripMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TripCreateBulk) SaveX(ctx context.Context) []*Trip {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TripCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TripCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Trip.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TripUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TripCreateBulk) OnConflict(opts ...sql.ConflictOption) *TripUpsertBulk {
	tcb.conflict = opts
	return &TripUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Trip.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TripCreateBulk) OnConflictColumns(columns ...string) *TripUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TripUpsertBulk{
		create: tcb,
	}
}

// TripUpsertBulk is the builder for "upsert"-ing
// a bulk of Trip nodes.
type TripUpsertBulk struct {
	create *TripCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Trip.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TripUpsertBulk) UpdateNewValues() *TripUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(trip.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Trip.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TripUpsertBulk) Ignore() *TripUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TripUpsertBulk) DoNothing() *TripUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TripCreateBulk.OnConflict
// documentation for more info.
func (u *TripUpsertBulk) Update(set func(*TripUpsert)) *TripUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TripUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TripUpsertBulk) SetUpdatedAt(v time.Time) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateUpdatedAt() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *TripUpsertBulk) SetUserID(v int) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateUserID() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateUserID()
	})
}

// SetDriverID sets the "driver_id" field.
func (u *TripUpsertBulk) SetDriverID(v int) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetDriverID(v)
	})
}

// UpdateDriverID sets the "driver_id" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateDriverID() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateDriverID()
	})
}

// ClearDriverID clears the value of the "driver_id" field.
func (u *TripUpsertBulk) ClearDriverID() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.ClearDriverID()
	})
}

// SetStartX sets the "start_x" field.
func (u *TripUpsertBulk) SetStartX(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetStartX(v)
	})
}

// AddStartX adds v to the "start_x" field.
func (u *TripUpsertBulk) AddStartX(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.AddStartX(v)
	})
}

// UpdateStartX sets the "start_x" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateStartX() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateStartX()
	})
}

// SetStartY sets the "start_y" field.
func (u *TripUpsertBulk) SetStartY(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetStartY(v)
	})
}

// AddStartY adds v to the "start_y" field.
func (u *TripUpsertBulk) AddStartY(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.AddStartY(v)
	})
}

// UpdateStartY sets the "start_y" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateStartY() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateStartY()
	})
}

// SetStartLocation sets the "start_location" field.
func (u *TripUpsertBulk) SetStartLocation(v string) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetStartLocation(v)
	})
}

// UpdateStartLocation sets the "start_location" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateStartLocation() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateStartLocation()
	})
}

// SetEndX sets the "end_x" field.
func (u *TripUpsertBulk) SetEndX(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetEndX(v)
	})
}

// AddEndX adds v to the "end_x" field.
func (u *TripUpsertBulk) AddEndX(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.AddEndX(v)
	})
}

// UpdateEndX sets the "end_x" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateEndX() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateEndX()
	})
}

// SetEndY sets the "end_y" field.
func (u *TripUpsertBulk) SetEndY(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetEndY(v)
	})
}

// AddEndY adds v to the "end_y" field.
func (u *TripUpsertBulk) AddEndY(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.AddEndY(v)
	})
}

// UpdateEndY sets the "end_y" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateEndY() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateEndY()
	})
}

// SetEndLocation sets the "end_location" field.
func (u *TripUpsertBulk) SetEndLocation(v string) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetEndLocation(v)
	})
}

// UpdateEndLocation sets the "end_location" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateEndLocation() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateEndLocation()
	})
}

// SetDistance sets the "distance" field.
func (u *TripUpsertBulk) SetDistance(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetDistance(v)
	})
}

// AddDistance adds v to the "distance" field.
func (u *TripUpsertBulk) AddDistance(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.AddDistance(v)
	})
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateDistance() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateDistance()
	})
}

// SetPrice sets the "price" field.
func (u *TripUpsertBulk) SetPrice(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *TripUpsertBulk) AddPrice(v float64) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdatePrice() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdatePrice()
	})
}

// SetType sets the "type" field.
func (u *TripUpsertBulk) SetType(v trip.Type) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateType() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *TripUpsertBulk) SetStatus(v trip.Status) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateStatus() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateStatus()
	})
}

// SetRate sets the "rate" field.
func (u *TripUpsertBulk) SetRate(v int) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.SetRate(v)
	})
}

// AddRate adds v to the "rate" field.
func (u *TripUpsertBulk) AddRate(v int) *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.AddRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *TripUpsertBulk) UpdateRate() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.UpdateRate()
	})
}

// ClearRate clears the value of the "rate" field.
func (u *TripUpsertBulk) ClearRate() *TripUpsertBulk {
	return u.Update(func(s *TripUpsert) {
		s.ClearRate()
	})
}

// Exec executes the query.
func (u *TripUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TripCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TripCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TripUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
