// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/huydnt1801/chuyende/internal/ent/otp"
	"github.com/huydnt1801/chuyende/internal/ent/predicate"
	"github.com/huydnt1801/chuyende/internal/ent/session"
	"github.com/huydnt1801/chuyende/internal/ent/trip"
	"github.com/huydnt1801/chuyende/internal/ent/user"
	"github.com/huydnt1801/chuyende/internal/ent/vehicledriver"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOtp           = "Otp"
	TypeSession       = "Session"
	TypeTrip          = "Trip"
	TypeUser          = "User"
	TypeVehicleDriver = "VehicleDriver"
)

// OtpMutation represents an operation that mutates the Otp nodes in the graph.
type OtpMutation struct {
	config
	op            Op
	typ           string
	id            *int
	phone_number  *string
	otp           *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Otp, error)
	predicates    []predicate.Otp
}

var _ ent.Mutation = (*OtpMutation)(nil)

// otpOption allows management of the mutation configuration using functional options.
type otpOption func(*OtpMutation)

// newOtpMutation creates new mutation for the Otp entity.
func newOtpMutation(c config, op Op, opts ...otpOption) *OtpMutation {
	m := &OtpMutation{
		config:        c,
		op:            op,
		typ:           TypeOtp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOtpID sets the ID field of the mutation.
func withOtpID(id int) otpOption {
	return func(m *OtpMutation) {
		var (
			err   error
			once  sync.Once
			value *Otp
		)
		m.oldValue = func(ctx context.Context) (*Otp, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Otp.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOtp sets the old Otp of the mutation.
func withOtp(node *Otp) otpOption {
	return func(m *OtpMutation) {
		m.oldValue = func(context.Context) (*Otp, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OtpMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OtpMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OtpMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OtpMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Otp.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPhoneNumber sets the "phone_number" field.
func (m *OtpMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *OtpMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the Otp entity.
// If the Otp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtpMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *OtpMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetOtp sets the "otp" field.
func (m *OtpMutation) SetOtp(s string) {
	m.otp = &s
}

// Otp returns the value of the "otp" field in the mutation.
func (m *OtpMutation) Otp() (r string, exists bool) {
	v := m.otp
	if v == nil {
		return
	}
	return *v, true
}

// OldOtp returns the old "otp" field's value of the Otp entity.
// If the Otp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtpMutation) OldOtp(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtp: %w", err)
	}
	return oldValue.Otp, nil
}

// ResetOtp resets all changes to the "otp" field.
func (m *OtpMutation) ResetOtp() {
	m.otp = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OtpMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OtpMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Otp entity.
// If the Otp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OtpMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OtpMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the OtpMutation builder.
func (m *OtpMutation) Where(ps ...predicate.Otp) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OtpMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OtpMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Otp, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OtpMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OtpMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Otp).
func (m *OtpMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OtpMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.phone_number != nil {
		fields = append(fields, otp.FieldPhoneNumber)
	}
	if m.otp != nil {
		fields = append(fields, otp.FieldOtp)
	}
	if m.created_at != nil {
		fields = append(fields, otp.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OtpMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case otp.FieldPhoneNumber:
		return m.PhoneNumber()
	case otp.FieldOtp:
		return m.Otp()
	case otp.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OtpMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case otp.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case otp.FieldOtp:
		return m.OldOtp(ctx)
	case otp.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Otp field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OtpMutation) SetField(name string, value ent.Value) error {
	switch name {
	case otp.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case otp.FieldOtp:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtp(v)
		return nil
	case otp.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Otp field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OtpMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OtpMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OtpMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Otp numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OtpMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OtpMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OtpMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Otp nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OtpMutation) ResetField(name string) error {
	switch name {
	case otp.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case otp.FieldOtp:
		m.ResetOtp()
		return nil
	case otp.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Otp field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OtpMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OtpMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OtpMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OtpMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OtpMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OtpMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OtpMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Otp unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OtpMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Otp edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	updated_at     *time.Time
	session_id     *string
	expire_in      *time.Time
	revoked        *bool
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	_driver        *int
	cleared_driver bool
	done           bool
	oldValue       func(context.Context) (*Session, error)
	predicates     []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SessionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SessionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SessionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *SessionMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SessionMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *SessionMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[session.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *SessionMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[session.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SessionMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, session.FieldUserID)
}

// SetDriverID sets the "driver_id" field.
func (m *SessionMutation) SetDriverID(i int) {
	m._driver = &i
}

// DriverID returns the value of the "driver_id" field in the mutation.
func (m *SessionMutation) DriverID() (r int, exists bool) {
	v := m._driver
	if v == nil {
		return
	}
	return *v, true
}

// OldDriverID returns the old "driver_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldDriverID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDriverID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDriverID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDriverID: %w", err)
	}
	return oldValue.DriverID, nil
}

// ClearDriverID clears the value of the "driver_id" field.
func (m *SessionMutation) ClearDriverID() {
	m._driver = nil
	m.clearedFields[session.FieldDriverID] = struct{}{}
}

// DriverIDCleared returns if the "driver_id" field was cleared in this mutation.
func (m *SessionMutation) DriverIDCleared() bool {
	_, ok := m.clearedFields[session.FieldDriverID]
	return ok
}

// ResetDriverID resets all changes to the "driver_id" field.
func (m *SessionMutation) ResetDriverID() {
	m._driver = nil
	delete(m.clearedFields, session.FieldDriverID)
}

// SetSessionID sets the "session_id" field.
func (m *SessionMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *SessionMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *SessionMutation) ResetSessionID() {
	m.session_id = nil
}

// SetExpireIn sets the "expire_in" field.
func (m *SessionMutation) SetExpireIn(t time.Time) {
	m.expire_in = &t
}

// ExpireIn returns the value of the "expire_in" field in the mutation.
func (m *SessionMutation) ExpireIn() (r time.Time, exists bool) {
	v := m.expire_in
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireIn returns the old "expire_in" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpireIn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireIn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireIn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireIn: %w", err)
	}
	return oldValue.ExpireIn, nil
}

// ResetExpireIn resets all changes to the "expire_in" field.
func (m *SessionMutation) ResetExpireIn() {
	m.expire_in = nil
}

// SetRevoked sets the "revoked" field.
func (m *SessionMutation) SetRevoked(b bool) {
	m.revoked = &b
}

// Revoked returns the value of the "revoked" field in the mutation.
func (m *SessionMutation) Revoked() (r bool, exists bool) {
	v := m.revoked
	if v == nil {
		return
	}
	return *v, true
}

// OldRevoked returns the old "revoked" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldRevoked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevoked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevoked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevoked: %w", err)
	}
	return oldValue.Revoked, nil
}

// ResetRevoked resets all changes to the "revoked" field.
func (m *SessionMutation) ResetRevoked() {
	m.revoked = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearDriver clears the "driver" edge to the VehicleDriver entity.
func (m *SessionMutation) ClearDriver() {
	m.cleared_driver = true
}

// DriverCleared reports if the "driver" edge to the VehicleDriver entity was cleared.
func (m *SessionMutation) DriverCleared() bool {
	return m.DriverIDCleared() || m.cleared_driver
}

// DriverIDs returns the "driver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DriverID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) DriverIDs() (ids []int) {
	if id := m._driver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDriver resets all changes to the "driver" edge.
func (m *SessionMutation) ResetDriver() {
	m._driver = nil
	m.cleared_driver = false
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, session.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, session.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, session.FieldUserID)
	}
	if m._driver != nil {
		fields = append(fields, session.FieldDriverID)
	}
	if m.session_id != nil {
		fields = append(fields, session.FieldSessionID)
	}
	if m.expire_in != nil {
		fields = append(fields, session.FieldExpireIn)
	}
	if m.revoked != nil {
		fields = append(fields, session.FieldRevoked)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldCreatedAt:
		return m.CreatedAt()
	case session.FieldUpdatedAt:
		return m.UpdatedAt()
	case session.FieldUserID:
		return m.UserID()
	case session.FieldDriverID:
		return m.DriverID()
	case session.FieldSessionID:
		return m.SessionID()
	case session.FieldExpireIn:
		return m.ExpireIn()
	case session.FieldRevoked:
		return m.Revoked()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case session.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case session.FieldUserID:
		return m.OldUserID(ctx)
	case session.FieldDriverID:
		return m.OldDriverID(ctx)
	case session.FieldSessionID:
		return m.OldSessionID(ctx)
	case session.FieldExpireIn:
		return m.OldExpireIn(ctx)
	case session.FieldRevoked:
		return m.OldRevoked(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case session.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case session.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case session.FieldDriverID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDriverID(v)
		return nil
	case session.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case session.FieldExpireIn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireIn(v)
		return nil
	case session.FieldRevoked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevoked(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(session.FieldUserID) {
		fields = append(fields, session.FieldUserID)
	}
	if m.FieldCleared(session.FieldDriverID) {
		fields = append(fields, session.FieldDriverID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	switch name {
	case session.FieldUserID:
		m.ClearUserID()
		return nil
	case session.FieldDriverID:
		m.ClearDriverID()
		return nil
	}
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case session.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case session.FieldUserID:
		m.ResetUserID()
		return nil
	case session.FieldDriverID:
		m.ResetDriverID()
		return nil
	case session.FieldSessionID:
		m.ResetSessionID()
		return nil
	case session.FieldExpireIn:
		m.ResetExpireIn()
		return nil
	case session.FieldRevoked:
		m.ResetRevoked()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	if m._driver != nil {
		edges = append(edges, session.EdgeDriver)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case session.EdgeDriver:
		if id := m._driver; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	if m.cleared_driver {
		edges = append(edges, session.EdgeDriver)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	case session.EdgeDriver:
		return m.cleared_driver
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	case session.EdgeDriver:
		m.ClearDriver()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	case session.EdgeDriver:
		m.ResetDriver()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// TripMutation represents an operation that mutates the Trip nodes in the graph.
type TripMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	updated_at     *time.Time
	start_x        *float64
	addstart_x     *float64
	start_y        *float64
	addstart_y     *float64
	start_location *string
	end_x          *float64
	addend_x       *float64
	end_y          *float64
	addend_y       *float64
	end_location   *string
	distance       *float64
	adddistance    *float64
	price          *float64
	addprice       *float64
	_type          *trip.Type
	status         *trip.Status
	rate           *int
	addrate        *int
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	_driver        *int
	cleared_driver bool
	done           bool
	oldValue       func(context.Context) (*Trip, error)
	predicates     []predicate.Trip
}

var _ ent.Mutation = (*TripMutation)(nil)

// tripOption allows management of the mutation configuration using functional options.
type tripOption func(*TripMutation)

// newTripMutation creates new mutation for the Trip entity.
func newTripMutation(c config, op Op, opts ...tripOption) *TripMutation {
	m := &TripMutation{
		config:        c,
		op:            op,
		typ:           TypeTrip,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTripID sets the ID field of the mutation.
func withTripID(id int) tripOption {
	return func(m *TripMutation) {
		var (
			err   error
			once  sync.Once
			value *Trip
		)
		m.oldValue = func(ctx context.Context) (*Trip, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Trip.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrip sets the old Trip of the mutation.
func withTrip(node *Trip) tripOption {
	return func(m *TripMutation) {
		m.oldValue = func(context.Context) (*Trip, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TripMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TripMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TripMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TripMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Trip.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TripMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TripMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TripMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TripMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TripMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TripMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *TripMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TripMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TripMutation) ResetUserID() {
	m.user = nil
}

// SetDriverID sets the "driver_id" field.
func (m *TripMutation) SetDriverID(i int) {
	m._driver = &i
}

// DriverID returns the value of the "driver_id" field in the mutation.
func (m *TripMutation) DriverID() (r int, exists bool) {
	v := m._driver
	if v == nil {
		return
	}
	return *v, true
}

// OldDriverID returns the old "driver_id" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldDriverID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDriverID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDriverID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDriverID: %w", err)
	}
	return oldValue.DriverID, nil
}

// ClearDriverID clears the value of the "driver_id" field.
func (m *TripMutation) ClearDriverID() {
	m._driver = nil
	m.clearedFields[trip.FieldDriverID] = struct{}{}
}

// DriverIDCleared returns if the "driver_id" field was cleared in this mutation.
func (m *TripMutation) DriverIDCleared() bool {
	_, ok := m.clearedFields[trip.FieldDriverID]
	return ok
}

// ResetDriverID resets all changes to the "driver_id" field.
func (m *TripMutation) ResetDriverID() {
	m._driver = nil
	delete(m.clearedFields, trip.FieldDriverID)
}

// SetStartX sets the "start_x" field.
func (m *TripMutation) SetStartX(f float64) {
	m.start_x = &f
	m.addstart_x = nil
}

// StartX returns the value of the "start_x" field in the mutation.
func (m *TripMutation) StartX() (r float64, exists bool) {
	v := m.start_x
	if v == nil {
		return
	}
	return *v, true
}

// OldStartX returns the old "start_x" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldStartX(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartX is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartX requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartX: %w", err)
	}
	return oldValue.StartX, nil
}

// AddStartX adds f to the "start_x" field.
func (m *TripMutation) AddStartX(f float64) {
	if m.addstart_x != nil {
		*m.addstart_x += f
	} else {
		m.addstart_x = &f
	}
}

// AddedStartX returns the value that was added to the "start_x" field in this mutation.
func (m *TripMutation) AddedStartX() (r float64, exists bool) {
	v := m.addstart_x
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartX resets all changes to the "start_x" field.
func (m *TripMutation) ResetStartX() {
	m.start_x = nil
	m.addstart_x = nil
}

// SetStartY sets the "start_y" field.
func (m *TripMutation) SetStartY(f float64) {
	m.start_y = &f
	m.addstart_y = nil
}

// StartY returns the value of the "start_y" field in the mutation.
func (m *TripMutation) StartY() (r float64, exists bool) {
	v := m.start_y
	if v == nil {
		return
	}
	return *v, true
}

// OldStartY returns the old "start_y" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldStartY(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartY is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartY requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartY: %w", err)
	}
	return oldValue.StartY, nil
}

// AddStartY adds f to the "start_y" field.
func (m *TripMutation) AddStartY(f float64) {
	if m.addstart_y != nil {
		*m.addstart_y += f
	} else {
		m.addstart_y = &f
	}
}

// AddedStartY returns the value that was added to the "start_y" field in this mutation.
func (m *TripMutation) AddedStartY() (r float64, exists bool) {
	v := m.addstart_y
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartY resets all changes to the "start_y" field.
func (m *TripMutation) ResetStartY() {
	m.start_y = nil
	m.addstart_y = nil
}

// SetStartLocation sets the "start_location" field.
func (m *TripMutation) SetStartLocation(s string) {
	m.start_location = &s
}

// StartLocation returns the value of the "start_location" field in the mutation.
func (m *TripMutation) StartLocation() (r string, exists bool) {
	v := m.start_location
	if v == nil {
		return
	}
	return *v, true
}

// OldStartLocation returns the old "start_location" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldStartLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartLocation: %w", err)
	}
	return oldValue.StartLocation, nil
}

// ResetStartLocation resets all changes to the "start_location" field.
func (m *TripMutation) ResetStartLocation() {
	m.start_location = nil
}

// SetEndX sets the "end_x" field.
func (m *TripMutation) SetEndX(f float64) {
	m.end_x = &f
	m.addend_x = nil
}

// EndX returns the value of the "end_x" field in the mutation.
func (m *TripMutation) EndX() (r float64, exists bool) {
	v := m.end_x
	if v == nil {
		return
	}
	return *v, true
}

// OldEndX returns the old "end_x" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldEndX(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndX is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndX requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndX: %w", err)
	}
	return oldValue.EndX, nil
}

// AddEndX adds f to the "end_x" field.
func (m *TripMutation) AddEndX(f float64) {
	if m.addend_x != nil {
		*m.addend_x += f
	} else {
		m.addend_x = &f
	}
}

// AddedEndX returns the value that was added to the "end_x" field in this mutation.
func (m *TripMutation) AddedEndX() (r float64, exists bool) {
	v := m.addend_x
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndX resets all changes to the "end_x" field.
func (m *TripMutation) ResetEndX() {
	m.end_x = nil
	m.addend_x = nil
}

// SetEndY sets the "end_y" field.
func (m *TripMutation) SetEndY(f float64) {
	m.end_y = &f
	m.addend_y = nil
}

// EndY returns the value of the "end_y" field in the mutation.
func (m *TripMutation) EndY() (r float64, exists bool) {
	v := m.end_y
	if v == nil {
		return
	}
	return *v, true
}

// OldEndY returns the old "end_y" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldEndY(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndY is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndY requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndY: %w", err)
	}
	return oldValue.EndY, nil
}

// AddEndY adds f to the "end_y" field.
func (m *TripMutation) AddEndY(f float64) {
	if m.addend_y != nil {
		*m.addend_y += f
	} else {
		m.addend_y = &f
	}
}

// AddedEndY returns the value that was added to the "end_y" field in this mutation.
func (m *TripMutation) AddedEndY() (r float64, exists bool) {
	v := m.addend_y
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndY resets all changes to the "end_y" field.
func (m *TripMutation) ResetEndY() {
	m.end_y = nil
	m.addend_y = nil
}

// SetEndLocation sets the "end_location" field.
func (m *TripMutation) SetEndLocation(s string) {
	m.end_location = &s
}

// EndLocation returns the value of the "end_location" field in the mutation.
func (m *TripMutation) EndLocation() (r string, exists bool) {
	v := m.end_location
	if v == nil {
		return
	}
	return *v, true
}

// OldEndLocation returns the old "end_location" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldEndLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndLocation: %w", err)
	}
	return oldValue.EndLocation, nil
}

// ResetEndLocation resets all changes to the "end_location" field.
func (m *TripMutation) ResetEndLocation() {
	m.end_location = nil
}

// SetDistance sets the "distance" field.
func (m *TripMutation) SetDistance(f float64) {
	m.distance = &f
	m.adddistance = nil
}

// Distance returns the value of the "distance" field in the mutation.
func (m *TripMutation) Distance() (r float64, exists bool) {
	v := m.distance
	if v == nil {
		return
	}
	return *v, true
}

// OldDistance returns the old "distance" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldDistance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDistance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDistance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistance: %w", err)
	}
	return oldValue.Distance, nil
}

// AddDistance adds f to the "distance" field.
func (m *TripMutation) AddDistance(f float64) {
	if m.adddistance != nil {
		*m.adddistance += f
	} else {
		m.adddistance = &f
	}
}

// AddedDistance returns the value that was added to the "distance" field in this mutation.
func (m *TripMutation) AddedDistance() (r float64, exists bool) {
	v := m.adddistance
	if v == nil {
		return
	}
	return *v, true
}

// ResetDistance resets all changes to the "distance" field.
func (m *TripMutation) ResetDistance() {
	m.distance = nil
	m.adddistance = nil
}

// SetPrice sets the "price" field.
func (m *TripMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *TripMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *TripMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *TripMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *TripMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetType sets the "type" field.
func (m *TripMutation) SetType(t trip.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TripMutation) GetType() (r trip.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldType(ctx context.Context) (v trip.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TripMutation) ResetType() {
	m._type = nil
}

// SetStatus sets the "status" field.
func (m *TripMutation) SetStatus(t trip.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TripMutation) Status() (r trip.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldStatus(ctx context.Context) (v trip.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TripMutation) ResetStatus() {
	m.status = nil
}

// SetRate sets the "rate" field.
func (m *TripMutation) SetRate(i int) {
	m.rate = &i
	m.addrate = nil
}

// Rate returns the value of the "rate" field in the mutation.
func (m *TripMutation) Rate() (r int, exists bool) {
	v := m.rate
	if v == nil {
		return
	}
	return *v, true
}

// OldRate returns the old "rate" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldRate(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate: %w", err)
	}
	return oldValue.Rate, nil
}

// AddRate adds i to the "rate" field.
func (m *TripMutation) AddRate(i int) {
	if m.addrate != nil {
		*m.addrate += i
	} else {
		m.addrate = &i
	}
}

// AddedRate returns the value that was added to the "rate" field in this mutation.
func (m *TripMutation) AddedRate() (r int, exists bool) {
	v := m.addrate
	if v == nil {
		return
	}
	return *v, true
}

// ClearRate clears the value of the "rate" field.
func (m *TripMutation) ClearRate() {
	m.rate = nil
	m.addrate = nil
	m.clearedFields[trip.FieldRate] = struct{}{}
}

// RateCleared returns if the "rate" field was cleared in this mutation.
func (m *TripMutation) RateCleared() bool {
	_, ok := m.clearedFields[trip.FieldRate]
	return ok
}

// ResetRate resets all changes to the "rate" field.
func (m *TripMutation) ResetRate() {
	m.rate = nil
	m.addrate = nil
	delete(m.clearedFields, trip.FieldRate)
}

// ClearUser clears the "user" edge to the User entity.
func (m *TripMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TripMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TripMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TripMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearDriver clears the "driver" edge to the VehicleDriver entity.
func (m *TripMutation) ClearDriver() {
	m.cleared_driver = true
}

// DriverCleared reports if the "driver" edge to the VehicleDriver entity was cleared.
func (m *TripMutation) DriverCleared() bool {
	return m.DriverIDCleared() || m.cleared_driver
}

// DriverIDs returns the "driver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DriverID instead. It exists only for internal usage by the builders.
func (m *TripMutation) DriverIDs() (ids []int) {
	if id := m._driver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDriver resets all changes to the "driver" edge.
func (m *TripMutation) ResetDriver() {
	m._driver = nil
	m.cleared_driver = false
}

// Where appends a list predicates to the TripMutation builder.
func (m *TripMutation) Where(ps ...predicate.Trip) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TripMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TripMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Trip, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TripMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TripMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Trip).
func (m *TripMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TripMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, trip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, trip.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, trip.FieldUserID)
	}
	if m._driver != nil {
		fields = append(fields, trip.FieldDriverID)
	}
	if m.start_x != nil {
		fields = append(fields, trip.FieldStartX)
	}
	if m.start_y != nil {
		fields = append(fields, trip.FieldStartY)
	}
	if m.start_location != nil {
		fields = append(fields, trip.FieldStartLocation)
	}
	if m.end_x != nil {
		fields = append(fields, trip.FieldEndX)
	}
	if m.end_y != nil {
		fields = append(fields, trip.FieldEndY)
	}
	if m.end_location != nil {
		fields = append(fields, trip.FieldEndLocation)
	}
	if m.distance != nil {
		fields = append(fields, trip.FieldDistance)
	}
	if m.price != nil {
		fields = append(fields, trip.FieldPrice)
	}
	if m._type != nil {
		fields = append(fields, trip.FieldType)
	}
	if m.status != nil {
		fields = append(fields, trip.FieldStatus)
	}
	if m.rate != nil {
		fields = append(fields, trip.FieldRate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TripMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trip.FieldCreatedAt:
		return m.CreatedAt()
	case trip.FieldUpdatedAt:
		return m.UpdatedAt()
	case trip.FieldUserID:
		return m.UserID()
	case trip.FieldDriverID:
		return m.DriverID()
	case trip.FieldStartX:
		return m.StartX()
	case trip.FieldStartY:
		return m.StartY()
	case trip.FieldStartLocation:
		return m.StartLocation()
	case trip.FieldEndX:
		return m.EndX()
	case trip.FieldEndY:
		return m.EndY()
	case trip.FieldEndLocation:
		return m.EndLocation()
	case trip.FieldDistance:
		return m.Distance()
	case trip.FieldPrice:
		return m.Price()
	case trip.FieldType:
		return m.GetType()
	case trip.FieldStatus:
		return m.Status()
	case trip.FieldRate:
		return m.Rate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TripMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case trip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case trip.FieldUserID:
		return m.OldUserID(ctx)
	case trip.FieldDriverID:
		return m.OldDriverID(ctx)
	case trip.FieldStartX:
		return m.OldStartX(ctx)
	case trip.FieldStartY:
		return m.OldStartY(ctx)
	case trip.FieldStartLocation:
		return m.OldStartLocation(ctx)
	case trip.FieldEndX:
		return m.OldEndX(ctx)
	case trip.FieldEndY:
		return m.OldEndY(ctx)
	case trip.FieldEndLocation:
		return m.OldEndLocation(ctx)
	case trip.FieldDistance:
		return m.OldDistance(ctx)
	case trip.FieldPrice:
		return m.OldPrice(ctx)
	case trip.FieldType:
		return m.OldType(ctx)
	case trip.FieldStatus:
		return m.OldStatus(ctx)
	case trip.FieldRate:
		return m.OldRate(ctx)
	}
	return nil, fmt.Errorf("unknown Trip field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TripMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case trip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case trip.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case trip.FieldDriverID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDriverID(v)
		return nil
	case trip.FieldStartX:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartX(v)
		return nil
	case trip.FieldStartY:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartY(v)
		return nil
	case trip.FieldStartLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartLocation(v)
		return nil
	case trip.FieldEndX:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndX(v)
		return nil
	case trip.FieldEndY:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndY(v)
		return nil
	case trip.FieldEndLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndLocation(v)
		return nil
	case trip.FieldDistance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistance(v)
		return nil
	case trip.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case trip.FieldType:
		v, ok := value.(trip.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case trip.FieldStatus:
		v, ok := value.(trip.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case trip.FieldRate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate(v)
		return nil
	}
	return fmt.Errorf("unknown Trip field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TripMutation) AddedFields() []string {
	var fields []string
	if m.addstart_x != nil {
		fields = append(fields, trip.FieldStartX)
	}
	if m.addstart_y != nil {
		fields = append(fields, trip.FieldStartY)
	}
	if m.addend_x != nil {
		fields = append(fields, trip.FieldEndX)
	}
	if m.addend_y != nil {
		fields = append(fields, trip.FieldEndY)
	}
	if m.adddistance != nil {
		fields = append(fields, trip.FieldDistance)
	}
	if m.addprice != nil {
		fields = append(fields, trip.FieldPrice)
	}
	if m.addrate != nil {
		fields = append(fields, trip.FieldRate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TripMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case trip.FieldStartX:
		return m.AddedStartX()
	case trip.FieldStartY:
		return m.AddedStartY()
	case trip.FieldEndX:
		return m.AddedEndX()
	case trip.FieldEndY:
		return m.AddedEndY()
	case trip.FieldDistance:
		return m.AddedDistance()
	case trip.FieldPrice:
		return m.AddedPrice()
	case trip.FieldRate:
		return m.AddedRate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TripMutation) AddField(name string, value ent.Value) error {
	switch name {
	case trip.FieldStartX:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartX(v)
		return nil
	case trip.FieldStartY:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartY(v)
		return nil
	case trip.FieldEndX:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndX(v)
		return nil
	case trip.FieldEndY:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndY(v)
		return nil
	case trip.FieldDistance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDistance(v)
		return nil
	case trip.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case trip.FieldRate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate(v)
		return nil
	}
	return fmt.Errorf("unknown Trip numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TripMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(trip.FieldDriverID) {
		fields = append(fields, trip.FieldDriverID)
	}
	if m.FieldCleared(trip.FieldRate) {
		fields = append(fields, trip.FieldRate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TripMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TripMutation) ClearField(name string) error {
	switch name {
	case trip.FieldDriverID:
		m.ClearDriverID()
		return nil
	case trip.FieldRate:
		m.ClearRate()
		return nil
	}
	return fmt.Errorf("unknown Trip nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TripMutation) ResetField(name string) error {
	switch name {
	case trip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case trip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case trip.FieldUserID:
		m.ResetUserID()
		return nil
	case trip.FieldDriverID:
		m.ResetDriverID()
		return nil
	case trip.FieldStartX:
		m.ResetStartX()
		return nil
	case trip.FieldStartY:
		m.ResetStartY()
		return nil
	case trip.FieldStartLocation:
		m.ResetStartLocation()
		return nil
	case trip.FieldEndX:
		m.ResetEndX()
		return nil
	case trip.FieldEndY:
		m.ResetEndY()
		return nil
	case trip.FieldEndLocation:
		m.ResetEndLocation()
		return nil
	case trip.FieldDistance:
		m.ResetDistance()
		return nil
	case trip.FieldPrice:
		m.ResetPrice()
		return nil
	case trip.FieldType:
		m.ResetType()
		return nil
	case trip.FieldStatus:
		m.ResetStatus()
		return nil
	case trip.FieldRate:
		m.ResetRate()
		return nil
	}
	return fmt.Errorf("unknown Trip field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TripMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, trip.EdgeUser)
	}
	if m._driver != nil {
		edges = append(edges, trip.EdgeDriver)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TripMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case trip.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case trip.EdgeDriver:
		if id := m._driver; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TripMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TripMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TripMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, trip.EdgeUser)
	}
	if m.cleared_driver {
		edges = append(edges, trip.EdgeDriver)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TripMutation) EdgeCleared(name string) bool {
	switch name {
	case trip.EdgeUser:
		return m.cleareduser
	case trip.EdgeDriver:
		return m.cleared_driver
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TripMutation) ClearEdge(name string) error {
	switch name {
	case trip.EdgeUser:
		m.ClearUser()
		return nil
	case trip.EdgeDriver:
		m.ClearDriver()
		return nil
	}
	return fmt.Errorf("unknown Trip unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TripMutation) ResetEdge(name string) error {
	switch name {
	case trip.EdgeUser:
		m.ResetUser()
		return nil
	case trip.EdgeDriver:
		m.ResetDriver()
		return nil
	}
	return fmt.Errorf("unknown Trip edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	created_at      *time.Time
	updated_at      *time.Time
	phone_number    *string
	confirmed       *bool
	full_name       *string
	image_url       *string
	password        *string
	clearedFields   map[string]struct{}
	trips           map[int]struct{}
	removedtrips    map[int]struct{}
	clearedtrips    bool
	sessions        map[int]struct{}
	removedsessions map[int]struct{}
	clearedsessions bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetConfirmed sets the "confirmed" field.
func (m *UserMutation) SetConfirmed(b bool) {
	m.confirmed = &b
}

// Confirmed returns the value of the "confirmed" field in the mutation.
func (m *UserMutation) Confirmed() (r bool, exists bool) {
	v := m.confirmed
	if v == nil {
		return
	}
	return *v, true
}

// OldConfirmed returns the old "confirmed" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldConfirmed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfirmed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfirmed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfirmed: %w", err)
	}
	return oldValue.Confirmed, nil
}

// ResetConfirmed resets all changes to the "confirmed" field.
func (m *UserMutation) ResetConfirmed() {
	m.confirmed = nil
}

// SetFullName sets the "full_name" field.
func (m *UserMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *UserMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *UserMutation) ResetFullName() {
	m.full_name = nil
}

// SetImageURL sets the "image_url" field.
func (m *UserMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *UserMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *UserMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[user.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *UserMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[user.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *UserMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, user.FieldImageURL)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddTripIDs adds the "trips" edge to the Trip entity by ids.
func (m *UserMutation) AddTripIDs(ids ...int) {
	if m.trips == nil {
		m.trips = make(map[int]struct{})
	}
	for i := range ids {
		m.trips[ids[i]] = struct{}{}
	}
}

// ClearTrips clears the "trips" edge to the Trip entity.
func (m *UserMutation) ClearTrips() {
	m.clearedtrips = true
}

// TripsCleared reports if the "trips" edge to the Trip entity was cleared.
func (m *UserMutation) TripsCleared() bool {
	return m.clearedtrips
}

// RemoveTripIDs removes the "trips" edge to the Trip entity by IDs.
func (m *UserMutation) RemoveTripIDs(ids ...int) {
	if m.removedtrips == nil {
		m.removedtrips = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.trips, ids[i])
		m.removedtrips[ids[i]] = struct{}{}
	}
}

// RemovedTrips returns the removed IDs of the "trips" edge to the Trip entity.
func (m *UserMutation) RemovedTripsIDs() (ids []int) {
	for id := range m.removedtrips {
		ids = append(ids, id)
	}
	return
}

// TripsIDs returns the "trips" edge IDs in the mutation.
func (m *UserMutation) TripsIDs() (ids []int) {
	for id := range m.trips {
		ids = append(ids, id)
	}
	return
}

// ResetTrips resets all changes to the "trips" edge.
func (m *UserMutation) ResetTrips() {
	m.trips = nil
	m.clearedtrips = false
	m.removedtrips = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.confirmed != nil {
		fields = append(fields, user.FieldConfirmed)
	}
	if m.full_name != nil {
		fields = append(fields, user.FieldFullName)
	}
	if m.image_url != nil {
		fields = append(fields, user.FieldImageURL)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldConfirmed:
		return m.Confirmed()
	case user.FieldFullName:
		return m.FullName()
	case user.FieldImageURL:
		return m.ImageURL()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldConfirmed:
		return m.OldConfirmed(ctx)
	case user.FieldFullName:
		return m.OldFullName(ctx)
	case user.FieldImageURL:
		return m.OldImageURL(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldConfirmed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfirmed(v)
		return nil
	case user.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case user.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldImageURL) {
		fields = append(fields, user.FieldImageURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldImageURL:
		m.ClearImageURL()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldConfirmed:
		m.ResetConfirmed()
		return nil
	case user.FieldFullName:
		m.ResetFullName()
		return nil
	case user.FieldImageURL:
		m.ResetImageURL()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.trips != nil {
		edges = append(edges, user.EdgeTrips)
	}
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTrips:
		ids := make([]ent.Value, 0, len(m.trips))
		for id := range m.trips {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtrips != nil {
		edges = append(edges, user.EdgeTrips)
	}
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTrips:
		ids := make([]ent.Value, 0, len(m.removedtrips))
		for id := range m.removedtrips {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtrips {
		edges = append(edges, user.EdgeTrips)
	}
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTrips:
		return m.clearedtrips
	case user.EdgeSessions:
		return m.clearedsessions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTrips:
		m.ResetTrips()
		return nil
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VehicleDriverMutation represents an operation that mutates the VehicleDriver nodes in the graph.
type VehicleDriverMutation struct {
	config
	op              Op
	typ             string
	id              *int
	created_at      *time.Time
	updated_at      *time.Time
	phone_number    *string
	full_name       *string
	password        *string
	license         *vehicledriver.License
	clearedFields   map[string]struct{}
	trips           map[int]struct{}
	removedtrips    map[int]struct{}
	clearedtrips    bool
	sessions        map[int]struct{}
	removedsessions map[int]struct{}
	clearedsessions bool
	done            bool
	oldValue        func(context.Context) (*VehicleDriver, error)
	predicates      []predicate.VehicleDriver
}

var _ ent.Mutation = (*VehicleDriverMutation)(nil)

// vehicledriverOption allows management of the mutation configuration using functional options.
type vehicledriverOption func(*VehicleDriverMutation)

// newVehicleDriverMutation creates new mutation for the VehicleDriver entity.
func newVehicleDriverMutation(c config, op Op, opts ...vehicledriverOption) *VehicleDriverMutation {
	m := &VehicleDriverMutation{
		config:        c,
		op:            op,
		typ:           TypeVehicleDriver,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVehicleDriverID sets the ID field of the mutation.
func withVehicleDriverID(id int) vehicledriverOption {
	return func(m *VehicleDriverMutation) {
		var (
			err   error
			once  sync.Once
			value *VehicleDriver
		)
		m.oldValue = func(ctx context.Context) (*VehicleDriver, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VehicleDriver.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVehicleDriver sets the old VehicleDriver of the mutation.
func withVehicleDriver(node *VehicleDriver) vehicledriverOption {
	return func(m *VehicleDriverMutation) {
		m.oldValue = func(context.Context) (*VehicleDriver, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VehicleDriverMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VehicleDriverMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VehicleDriverMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VehicleDriverMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VehicleDriver.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *VehicleDriverMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VehicleDriverMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the VehicleDriver entity.
// If the VehicleDriver object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleDriverMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VehicleDriverMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VehicleDriverMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VehicleDriverMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the VehicleDriver entity.
// If the VehicleDriver object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleDriverMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VehicleDriverMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *VehicleDriverMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *VehicleDriverMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the VehicleDriver entity.
// If the VehicleDriver object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleDriverMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *VehicleDriverMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetFullName sets the "full_name" field.
func (m *VehicleDriverMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *VehicleDriverMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the VehicleDriver entity.
// If the VehicleDriver object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleDriverMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *VehicleDriverMutation) ResetFullName() {
	m.full_name = nil
}

// SetPassword sets the "password" field.
func (m *VehicleDriverMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *VehicleDriverMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the VehicleDriver entity.
// If the VehicleDriver object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleDriverMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *VehicleDriverMutation) ResetPassword() {
	m.password = nil
}

// SetLicense sets the "license" field.
func (m *VehicleDriverMutation) SetLicense(v vehicledriver.License) {
	m.license = &v
}

// License returns the value of the "license" field in the mutation.
func (m *VehicleDriverMutation) License() (r vehicledriver.License, exists bool) {
	v := m.license
	if v == nil {
		return
	}
	return *v, true
}

// OldLicense returns the old "license" field's value of the VehicleDriver entity.
// If the VehicleDriver object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleDriverMutation) OldLicense(ctx context.Context) (v vehicledriver.License, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicense is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicense requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicense: %w", err)
	}
	return oldValue.License, nil
}

// ResetLicense resets all changes to the "license" field.
func (m *VehicleDriverMutation) ResetLicense() {
	m.license = nil
}

// AddTripIDs adds the "trips" edge to the Trip entity by ids.
func (m *VehicleDriverMutation) AddTripIDs(ids ...int) {
	if m.trips == nil {
		m.trips = make(map[int]struct{})
	}
	for i := range ids {
		m.trips[ids[i]] = struct{}{}
	}
}

// ClearTrips clears the "trips" edge to the Trip entity.
func (m *VehicleDriverMutation) ClearTrips() {
	m.clearedtrips = true
}

// TripsCleared reports if the "trips" edge to the Trip entity was cleared.
func (m *VehicleDriverMutation) TripsCleared() bool {
	return m.clearedtrips
}

// RemoveTripIDs removes the "trips" edge to the Trip entity by IDs.
func (m *VehicleDriverMutation) RemoveTripIDs(ids ...int) {
	if m.removedtrips == nil {
		m.removedtrips = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.trips, ids[i])
		m.removedtrips[ids[i]] = struct{}{}
	}
}

// RemovedTrips returns the removed IDs of the "trips" edge to the Trip entity.
func (m *VehicleDriverMutation) RemovedTripsIDs() (ids []int) {
	for id := range m.removedtrips {
		ids = append(ids, id)
	}
	return
}

// TripsIDs returns the "trips" edge IDs in the mutation.
func (m *VehicleDriverMutation) TripsIDs() (ids []int) {
	for id := range m.trips {
		ids = append(ids, id)
	}
	return
}

// ResetTrips resets all changes to the "trips" edge.
func (m *VehicleDriverMutation) ResetTrips() {
	m.trips = nil
	m.clearedtrips = false
	m.removedtrips = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *VehicleDriverMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *VehicleDriverMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *VehicleDriverMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *VehicleDriverMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *VehicleDriverMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *VehicleDriverMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *VehicleDriverMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// Where appends a list predicates to the VehicleDriverMutation builder.
func (m *VehicleDriverMutation) Where(ps ...predicate.VehicleDriver) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VehicleDriverMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VehicleDriverMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VehicleDriver, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VehicleDriverMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VehicleDriverMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VehicleDriver).
func (m *VehicleDriverMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VehicleDriverMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, vehicledriver.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, vehicledriver.FieldUpdatedAt)
	}
	if m.phone_number != nil {
		fields = append(fields, vehicledriver.FieldPhoneNumber)
	}
	if m.full_name != nil {
		fields = append(fields, vehicledriver.FieldFullName)
	}
	if m.password != nil {
		fields = append(fields, vehicledriver.FieldPassword)
	}
	if m.license != nil {
		fields = append(fields, vehicledriver.FieldLicense)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VehicleDriverMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vehicledriver.FieldCreatedAt:
		return m.CreatedAt()
	case vehicledriver.FieldUpdatedAt:
		return m.UpdatedAt()
	case vehicledriver.FieldPhoneNumber:
		return m.PhoneNumber()
	case vehicledriver.FieldFullName:
		return m.FullName()
	case vehicledriver.FieldPassword:
		return m.Password()
	case vehicledriver.FieldLicense:
		return m.License()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VehicleDriverMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vehicledriver.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case vehicledriver.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case vehicledriver.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case vehicledriver.FieldFullName:
		return m.OldFullName(ctx)
	case vehicledriver.FieldPassword:
		return m.OldPassword(ctx)
	case vehicledriver.FieldLicense:
		return m.OldLicense(ctx)
	}
	return nil, fmt.Errorf("unknown VehicleDriver field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VehicleDriverMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vehicledriver.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case vehicledriver.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case vehicledriver.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case vehicledriver.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case vehicledriver.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case vehicledriver.FieldLicense:
		v, ok := value.(vehicledriver.License)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicense(v)
		return nil
	}
	return fmt.Errorf("unknown VehicleDriver field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VehicleDriverMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VehicleDriverMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VehicleDriverMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VehicleDriver numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VehicleDriverMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VehicleDriverMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VehicleDriverMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VehicleDriver nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VehicleDriverMutation) ResetField(name string) error {
	switch name {
	case vehicledriver.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case vehicledriver.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case vehicledriver.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case vehicledriver.FieldFullName:
		m.ResetFullName()
		return nil
	case vehicledriver.FieldPassword:
		m.ResetPassword()
		return nil
	case vehicledriver.FieldLicense:
		m.ResetLicense()
		return nil
	}
	return fmt.Errorf("unknown VehicleDriver field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VehicleDriverMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.trips != nil {
		edges = append(edges, vehicledriver.EdgeTrips)
	}
	if m.sessions != nil {
		edges = append(edges, vehicledriver.EdgeSessions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VehicleDriverMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vehicledriver.EdgeTrips:
		ids := make([]ent.Value, 0, len(m.trips))
		for id := range m.trips {
			ids = append(ids, id)
		}
		return ids
	case vehicledriver.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VehicleDriverMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtrips != nil {
		edges = append(edges, vehicledriver.EdgeTrips)
	}
	if m.removedsessions != nil {
		edges = append(edges, vehicledriver.EdgeSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VehicleDriverMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case vehicledriver.EdgeTrips:
		ids := make([]ent.Value, 0, len(m.removedtrips))
		for id := range m.removedtrips {
			ids = append(ids, id)
		}
		return ids
	case vehicledriver.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VehicleDriverMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtrips {
		edges = append(edges, vehicledriver.EdgeTrips)
	}
	if m.clearedsessions {
		edges = append(edges, vehicledriver.EdgeSessions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VehicleDriverMutation) EdgeCleared(name string) bool {
	switch name {
	case vehicledriver.EdgeTrips:
		return m.clearedtrips
	case vehicledriver.EdgeSessions:
		return m.clearedsessions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VehicleDriverMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown VehicleDriver unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VehicleDriverMutation) ResetEdge(name string) error {
	switch name {
	case vehicledriver.EdgeTrips:
		m.ResetTrips()
		return nil
	case vehicledriver.EdgeSessions:
		m.ResetSessions()
		return nil
	}
	return fmt.Errorf("unknown VehicleDriver edge %s", name)
}
