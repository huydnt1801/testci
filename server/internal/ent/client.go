// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/huydnt1801/chuyende/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/huydnt1801/chuyende/internal/ent/otp"
	"github.com/huydnt1801/chuyende/internal/ent/session"
	"github.com/huydnt1801/chuyende/internal/ent/trip"
	"github.com/huydnt1801/chuyende/internal/ent/user"
	"github.com/huydnt1801/chuyende/internal/ent/vehicledriver"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Otp is the client for interacting with the Otp builders.
	Otp *OtpClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// Trip is the client for interacting with the Trip builders.
	Trip *TripClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VehicleDriver is the client for interacting with the VehicleDriver builders.
	VehicleDriver *VehicleDriverClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Otp = NewOtpClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.Trip = NewTripClient(c.config)
	c.User = NewUserClient(c.config)
	c.VehicleDriver = NewVehicleDriverClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Otp:           NewOtpClient(cfg),
		Session:       NewSessionClient(cfg),
		Trip:          NewTripClient(cfg),
		User:          NewUserClient(cfg),
		VehicleDriver: NewVehicleDriverClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Otp:           NewOtpClient(cfg),
		Session:       NewSessionClient(cfg),
		Trip:          NewTripClient(cfg),
		User:          NewUserClient(cfg),
		VehicleDriver: NewVehicleDriverClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Otp.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Otp.Use(hooks...)
	c.Session.Use(hooks...)
	c.Trip.Use(hooks...)
	c.User.Use(hooks...)
	c.VehicleDriver.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Otp.Intercept(interceptors...)
	c.Session.Intercept(interceptors...)
	c.Trip.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.VehicleDriver.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *OtpMutation:
		return c.Otp.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *TripMutation:
		return c.Trip.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VehicleDriverMutation:
		return c.VehicleDriver.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// OtpClient is a client for the Otp schema.
type OtpClient struct {
	config
}

// NewOtpClient returns a client for the Otp from the given config.
func NewOtpClient(c config) *OtpClient {
	return &OtpClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `otp.Hooks(f(g(h())))`.
func (c *OtpClient) Use(hooks ...Hook) {
	c.hooks.Otp = append(c.hooks.Otp, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `otp.Intercept(f(g(h())))`.
func (c *OtpClient) Intercept(interceptors ...Interceptor) {
	c.inters.Otp = append(c.inters.Otp, interceptors...)
}

// Create returns a builder for creating a Otp entity.
func (c *OtpClient) Create() *OtpCreate {
	mutation := newOtpMutation(c.config, OpCreate)
	return &OtpCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Otp entities.
func (c *OtpClient) CreateBulk(builders ...*OtpCreate) *OtpCreateBulk {
	return &OtpCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Otp.
func (c *OtpClient) Update() *OtpUpdate {
	mutation := newOtpMutation(c.config, OpUpdate)
	return &OtpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OtpClient) UpdateOne(o *Otp) *OtpUpdateOne {
	mutation := newOtpMutation(c.config, OpUpdateOne, withOtp(o))
	return &OtpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OtpClient) UpdateOneID(id int) *OtpUpdateOne {
	mutation := newOtpMutation(c.config, OpUpdateOne, withOtpID(id))
	return &OtpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Otp.
func (c *OtpClient) Delete() *OtpDelete {
	mutation := newOtpMutation(c.config, OpDelete)
	return &OtpDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OtpClient) DeleteOne(o *Otp) *OtpDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OtpClient) DeleteOneID(id int) *OtpDeleteOne {
	builder := c.Delete().Where(otp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OtpDeleteOne{builder}
}

// Query returns a query builder for Otp.
func (c *OtpClient) Query() *OtpQuery {
	return &OtpQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOtp},
		inters: c.Interceptors(),
	}
}

// Get returns a Otp entity by its id.
func (c *OtpClient) Get(ctx context.Context, id int) (*Otp, error) {
	return c.Query().Where(otp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OtpClient) GetX(ctx context.Context, id int) *Otp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OtpClient) Hooks() []Hook {
	return c.hooks.Otp
}

// Interceptors returns the client interceptors.
func (c *OtpClient) Interceptors() []Interceptor {
	return c.inters.Otp
}

func (c *OtpClient) mutate(ctx context.Context, m *OtpMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OtpCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OtpUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OtpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OtpDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Otp mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id int) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(s *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDriver queries the driver edge of a Session.
func (c *SessionClient) QueryDriver(s *Session) *VehicleDriverQuery {
	query := (&VehicleDriverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(vehicledriver.Table, vehicledriver.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.DriverTable, session.DriverColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// TripClient is a client for the Trip schema.
type TripClient struct {
	config
}

// NewTripClient returns a client for the Trip from the given config.
func NewTripClient(c config) *TripClient {
	return &TripClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trip.Hooks(f(g(h())))`.
func (c *TripClient) Use(hooks ...Hook) {
	c.hooks.Trip = append(c.hooks.Trip, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trip.Intercept(f(g(h())))`.
func (c *TripClient) Intercept(interceptors ...Interceptor) {
	c.inters.Trip = append(c.inters.Trip, interceptors...)
}

// Create returns a builder for creating a Trip entity.
func (c *TripClient) Create() *TripCreate {
	mutation := newTripMutation(c.config, OpCreate)
	return &TripCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Trip entities.
func (c *TripClient) CreateBulk(builders ...*TripCreate) *TripCreateBulk {
	return &TripCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Trip.
func (c *TripClient) Update() *TripUpdate {
	mutation := newTripMutation(c.config, OpUpdate)
	return &TripUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TripClient) UpdateOne(t *Trip) *TripUpdateOne {
	mutation := newTripMutation(c.config, OpUpdateOne, withTrip(t))
	return &TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TripClient) UpdateOneID(id int) *TripUpdateOne {
	mutation := newTripMutation(c.config, OpUpdateOne, withTripID(id))
	return &TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Trip.
func (c *TripClient) Delete() *TripDelete {
	mutation := newTripMutation(c.config, OpDelete)
	return &TripDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TripClient) DeleteOne(t *Trip) *TripDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TripClient) DeleteOneID(id int) *TripDeleteOne {
	builder := c.Delete().Where(trip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TripDeleteOne{builder}
}

// Query returns a query builder for Trip.
func (c *TripClient) Query() *TripQuery {
	return &TripQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrip},
		inters: c.Interceptors(),
	}
}

// Get returns a Trip entity by its id.
func (c *TripClient) Get(ctx context.Context, id int) (*Trip, error) {
	return c.Query().Where(trip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TripClient) GetX(ctx context.Context, id int) *Trip {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Trip.
func (c *TripClient) QueryUser(t *Trip) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trip.UserTable, trip.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDriver queries the driver edge of a Trip.
func (c *TripClient) QueryDriver(t *Trip) *VehicleDriverQuery {
	query := (&VehicleDriverClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(vehicledriver.Table, vehicledriver.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trip.DriverTable, trip.DriverColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TripClient) Hooks() []Hook {
	return c.hooks.Trip
}

// Interceptors returns the client interceptors.
func (c *TripClient) Interceptors() []Interceptor {
	return c.inters.Trip
}

func (c *TripClient) mutate(ctx context.Context, m *TripMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TripCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TripUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TripDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Trip mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrips queries the trips edge of a User.
func (c *UserClient) QueryTrips(u *User) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TripsTable, user.TripsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VehicleDriverClient is a client for the VehicleDriver schema.
type VehicleDriverClient struct {
	config
}

// NewVehicleDriverClient returns a client for the VehicleDriver from the given config.
func NewVehicleDriverClient(c config) *VehicleDriverClient {
	return &VehicleDriverClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehicledriver.Hooks(f(g(h())))`.
func (c *VehicleDriverClient) Use(hooks ...Hook) {
	c.hooks.VehicleDriver = append(c.hooks.VehicleDriver, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vehicledriver.Intercept(f(g(h())))`.
func (c *VehicleDriverClient) Intercept(interceptors ...Interceptor) {
	c.inters.VehicleDriver = append(c.inters.VehicleDriver, interceptors...)
}

// Create returns a builder for creating a VehicleDriver entity.
func (c *VehicleDriverClient) Create() *VehicleDriverCreate {
	mutation := newVehicleDriverMutation(c.config, OpCreate)
	return &VehicleDriverCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VehicleDriver entities.
func (c *VehicleDriverClient) CreateBulk(builders ...*VehicleDriverCreate) *VehicleDriverCreateBulk {
	return &VehicleDriverCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VehicleDriver.
func (c *VehicleDriverClient) Update() *VehicleDriverUpdate {
	mutation := newVehicleDriverMutation(c.config, OpUpdate)
	return &VehicleDriverUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleDriverClient) UpdateOne(vd *VehicleDriver) *VehicleDriverUpdateOne {
	mutation := newVehicleDriverMutation(c.config, OpUpdateOne, withVehicleDriver(vd))
	return &VehicleDriverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleDriverClient) UpdateOneID(id int) *VehicleDriverUpdateOne {
	mutation := newVehicleDriverMutation(c.config, OpUpdateOne, withVehicleDriverID(id))
	return &VehicleDriverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VehicleDriver.
func (c *VehicleDriverClient) Delete() *VehicleDriverDelete {
	mutation := newVehicleDriverMutation(c.config, OpDelete)
	return &VehicleDriverDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VehicleDriverClient) DeleteOne(vd *VehicleDriver) *VehicleDriverDeleteOne {
	return c.DeleteOneID(vd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VehicleDriverClient) DeleteOneID(id int) *VehicleDriverDeleteOne {
	builder := c.Delete().Where(vehicledriver.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleDriverDeleteOne{builder}
}

// Query returns a query builder for VehicleDriver.
func (c *VehicleDriverClient) Query() *VehicleDriverQuery {
	return &VehicleDriverQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVehicleDriver},
		inters: c.Interceptors(),
	}
}

// Get returns a VehicleDriver entity by its id.
func (c *VehicleDriverClient) Get(ctx context.Context, id int) (*VehicleDriver, error) {
	return c.Query().Where(vehicledriver.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleDriverClient) GetX(ctx context.Context, id int) *VehicleDriver {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrips queries the trips edge of a VehicleDriver.
func (c *VehicleDriverClient) QueryTrips(vd *VehicleDriver) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicledriver.Table, vehicledriver.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehicledriver.TripsTable, vehicledriver.TripsColumn),
		)
		fromV = sqlgraph.Neighbors(vd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a VehicleDriver.
func (c *VehicleDriverClient) QuerySessions(vd *VehicleDriver) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicledriver.Table, vehicledriver.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehicledriver.SessionsTable, vehicledriver.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(vd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleDriverClient) Hooks() []Hook {
	return c.hooks.VehicleDriver
}

// Interceptors returns the client interceptors.
func (c *VehicleDriverClient) Interceptors() []Interceptor {
	return c.inters.VehicleDriver
}

func (c *VehicleDriverClient) mutate(ctx context.Context, m *VehicleDriverMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VehicleDriverCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VehicleDriverUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VehicleDriverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VehicleDriverDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VehicleDriver mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Otp, Session, Trip, User, VehicleDriver []ent.Hook
	}
	inters struct {
		Otp, Session, Trip, User, VehicleDriver []ent.Interceptor
	}
)
