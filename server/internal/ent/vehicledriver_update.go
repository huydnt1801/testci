// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huydnt1801/chuyende/internal/ent/predicate"
	"github.com/huydnt1801/chuyende/internal/ent/session"
	"github.com/huydnt1801/chuyende/internal/ent/trip"
	"github.com/huydnt1801/chuyende/internal/ent/vehicledriver"
)

// VehicleDriverUpdate is the builder for updating VehicleDriver entities.
type VehicleDriverUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleDriverMutation
}

// Where appends a list predicates to the VehicleDriverUpdate builder.
func (vdu *VehicleDriverUpdate) Where(ps ...predicate.VehicleDriver) *VehicleDriverUpdate {
	vdu.mutation.Where(ps...)
	return vdu
}

// SetUpdatedAt sets the "updated_at" field.
func (vdu *VehicleDriverUpdate) SetUpdatedAt(t time.Time) *VehicleDriverUpdate {
	vdu.mutation.SetUpdatedAt(t)
	return vdu
}

// SetPhoneNumber sets the "phone_number" field.
func (vdu *VehicleDriverUpdate) SetPhoneNumber(s string) *VehicleDriverUpdate {
	vdu.mutation.SetPhoneNumber(s)
	return vdu
}

// SetFullName sets the "full_name" field.
func (vdu *VehicleDriverUpdate) SetFullName(s string) *VehicleDriverUpdate {
	vdu.mutation.SetFullName(s)
	return vdu
}

// SetPassword sets the "password" field.
func (vdu *VehicleDriverUpdate) SetPassword(s string) *VehicleDriverUpdate {
	vdu.mutation.SetPassword(s)
	return vdu
}

// SetLicense sets the "license" field.
func (vdu *VehicleDriverUpdate) SetLicense(v vehicledriver.License) *VehicleDriverUpdate {
	vdu.mutation.SetLicense(v)
	return vdu
}

// AddTripIDs adds the "trips" edge to the Trip entity by IDs.
func (vdu *VehicleDriverUpdate) AddTripIDs(ids ...int) *VehicleDriverUpdate {
	vdu.mutation.AddTripIDs(ids...)
	return vdu
}

// AddTrips adds the "trips" edges to the Trip entity.
func (vdu *VehicleDriverUpdate) AddTrips(t ...*Trip) *VehicleDriverUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vdu.AddTripIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (vdu *VehicleDriverUpdate) AddSessionIDs(ids ...int) *VehicleDriverUpdate {
	vdu.mutation.AddSessionIDs(ids...)
	return vdu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (vdu *VehicleDriverUpdate) AddSessions(s ...*Session) *VehicleDriverUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vdu.AddSessionIDs(ids...)
}

// Mutation returns the VehicleDriverMutation object of the builder.
func (vdu *VehicleDriverUpdate) Mutation() *VehicleDriverMutation {
	return vdu.mutation
}

// ClearTrips clears all "trips" edges to the Trip entity.
func (vdu *VehicleDriverUpdate) ClearTrips() *VehicleDriverUpdate {
	vdu.mutation.ClearTrips()
	return vdu
}

// RemoveTripIDs removes the "trips" edge to Trip entities by IDs.
func (vdu *VehicleDriverUpdate) RemoveTripIDs(ids ...int) *VehicleDriverUpdate {
	vdu.mutation.RemoveTripIDs(ids...)
	return vdu
}

// RemoveTrips removes "trips" edges to Trip entities.
func (vdu *VehicleDriverUpdate) RemoveTrips(t ...*Trip) *VehicleDriverUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vdu.RemoveTripIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (vdu *VehicleDriverUpdate) ClearSessions() *VehicleDriverUpdate {
	vdu.mutation.ClearSessions()
	return vdu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (vdu *VehicleDriverUpdate) RemoveSessionIDs(ids ...int) *VehicleDriverUpdate {
	vdu.mutation.RemoveSessionIDs(ids...)
	return vdu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (vdu *VehicleDriverUpdate) RemoveSessions(s ...*Session) *VehicleDriverUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vdu.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vdu *VehicleDriverUpdate) Save(ctx context.Context) (int, error) {
	vdu.defaults()
	return withHooks[int, VehicleDriverMutation](ctx, vdu.sqlSave, vdu.mutation, vdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vdu *VehicleDriverUpdate) SaveX(ctx context.Context) int {
	affected, err := vdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdu *VehicleDriverUpdate) Exec(ctx context.Context) error {
	_, err := vdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdu *VehicleDriverUpdate) ExecX(ctx context.Context) {
	if err := vdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdu *VehicleDriverUpdate) defaults() {
	if _, ok := vdu.mutation.UpdatedAt(); !ok {
		v := vehicledriver.UpdateDefaultUpdatedAt()
		vdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdu *VehicleDriverUpdate) check() error {
	if v, ok := vdu.mutation.PhoneNumber(); ok {
		if err := vehicledriver.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "VehicleDriver.phone_number": %w`, err)}
		}
	}
	if v, ok := vdu.mutation.License(); ok {
		if err := vehicledriver.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "VehicleDriver.license": %w`, err)}
		}
	}
	return nil
}

func (vdu *VehicleDriverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicledriver.Table, vehicledriver.Columns, sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt))
	if ps := vdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdu.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicledriver.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vdu.mutation.PhoneNumber(); ok {
		_spec.SetField(vehicledriver.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := vdu.mutation.FullName(); ok {
		_spec.SetField(vehicledriver.FieldFullName, field.TypeString, value)
	}
	if value, ok := vdu.mutation.Password(); ok {
		_spec.SetField(vehicledriver.FieldPassword, field.TypeString, value)
	}
	if value, ok := vdu.mutation.License(); ok {
		_spec.SetField(vehicledriver.FieldLicense, field.TypeEnum, value)
	}
	if vdu.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.TripsTable,
			Columns: []string{vehicledriver.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.RemovedTripsIDs(); len(nodes) > 0 && !vdu.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.TripsTable,
			Columns: []string{vehicledriver.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.TripsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.TripsTable,
			Columns: []string{vehicledriver.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vdu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.SessionsTable,
			Columns: []string{vehicledriver.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !vdu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.SessionsTable,
			Columns: []string{vehicledriver.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.SessionsTable,
			Columns: []string{vehicledriver.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicledriver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vdu.mutation.done = true
	return n, nil
}

// VehicleDriverUpdateOne is the builder for updating a single VehicleDriver entity.
type VehicleDriverUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleDriverMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vduo *VehicleDriverUpdateOne) SetUpdatedAt(t time.Time) *VehicleDriverUpdateOne {
	vduo.mutation.SetUpdatedAt(t)
	return vduo
}

// SetPhoneNumber sets the "phone_number" field.
func (vduo *VehicleDriverUpdateOne) SetPhoneNumber(s string) *VehicleDriverUpdateOne {
	vduo.mutation.SetPhoneNumber(s)
	return vduo
}

// SetFullName sets the "full_name" field.
func (vduo *VehicleDriverUpdateOne) SetFullName(s string) *VehicleDriverUpdateOne {
	vduo.mutation.SetFullName(s)
	return vduo
}

// SetPassword sets the "password" field.
func (vduo *VehicleDriverUpdateOne) SetPassword(s string) *VehicleDriverUpdateOne {
	vduo.mutation.SetPassword(s)
	return vduo
}

// SetLicense sets the "license" field.
func (vduo *VehicleDriverUpdateOne) SetLicense(v vehicledriver.License) *VehicleDriverUpdateOne {
	vduo.mutation.SetLicense(v)
	return vduo
}

// AddTripIDs adds the "trips" edge to the Trip entity by IDs.
func (vduo *VehicleDriverUpdateOne) AddTripIDs(ids ...int) *VehicleDriverUpdateOne {
	vduo.mutation.AddTripIDs(ids...)
	return vduo
}

// AddTrips adds the "trips" edges to the Trip entity.
func (vduo *VehicleDriverUpdateOne) AddTrips(t ...*Trip) *VehicleDriverUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vduo.AddTripIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (vduo *VehicleDriverUpdateOne) AddSessionIDs(ids ...int) *VehicleDriverUpdateOne {
	vduo.mutation.AddSessionIDs(ids...)
	return vduo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (vduo *VehicleDriverUpdateOne) AddSessions(s ...*Session) *VehicleDriverUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vduo.AddSessionIDs(ids...)
}

// Mutation returns the VehicleDriverMutation object of the builder.
func (vduo *VehicleDriverUpdateOne) Mutation() *VehicleDriverMutation {
	return vduo.mutation
}

// ClearTrips clears all "trips" edges to the Trip entity.
func (vduo *VehicleDriverUpdateOne) ClearTrips() *VehicleDriverUpdateOne {
	vduo.mutation.ClearTrips()
	return vduo
}

// RemoveTripIDs removes the "trips" edge to Trip entities by IDs.
func (vduo *VehicleDriverUpdateOne) RemoveTripIDs(ids ...int) *VehicleDriverUpdateOne {
	vduo.mutation.RemoveTripIDs(ids...)
	return vduo
}

// RemoveTrips removes "trips" edges to Trip entities.
func (vduo *VehicleDriverUpdateOne) RemoveTrips(t ...*Trip) *VehicleDriverUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vduo.RemoveTripIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (vduo *VehicleDriverUpdateOne) ClearSessions() *VehicleDriverUpdateOne {
	vduo.mutation.ClearSessions()
	return vduo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (vduo *VehicleDriverUpdateOne) RemoveSessionIDs(ids ...int) *VehicleDriverUpdateOne {
	vduo.mutation.RemoveSessionIDs(ids...)
	return vduo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (vduo *VehicleDriverUpdateOne) RemoveSessions(s ...*Session) *VehicleDriverUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vduo.RemoveSessionIDs(ids...)
}

// Where appends a list predicates to the VehicleDriverUpdate builder.
func (vduo *VehicleDriverUpdateOne) Where(ps ...predicate.VehicleDriver) *VehicleDriverUpdateOne {
	vduo.mutation.Where(ps...)
	return vduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vduo *VehicleDriverUpdateOne) Select(field string, fields ...string) *VehicleDriverUpdateOne {
	vduo.fields = append([]string{field}, fields...)
	return vduo
}

// Save executes the query and returns the updated VehicleDriver entity.
func (vduo *VehicleDriverUpdateOne) Save(ctx context.Context) (*VehicleDriver, error) {
	vduo.defaults()
	return withHooks[*VehicleDriver, VehicleDriverMutation](ctx, vduo.sqlSave, vduo.mutation, vduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vduo *VehicleDriverUpdateOne) SaveX(ctx context.Context) *VehicleDriver {
	node, err := vduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vduo *VehicleDriverUpdateOne) Exec(ctx context.Context) error {
	_, err := vduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vduo *VehicleDriverUpdateOne) ExecX(ctx context.Context) {
	if err := vduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vduo *VehicleDriverUpdateOne) defaults() {
	if _, ok := vduo.mutation.UpdatedAt(); !ok {
		v := vehicledriver.UpdateDefaultUpdatedAt()
		vduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vduo *VehicleDriverUpdateOne) check() error {
	if v, ok := vduo.mutation.PhoneNumber(); ok {
		if err := vehicledriver.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "VehicleDriver.phone_number": %w`, err)}
		}
	}
	if v, ok := vduo.mutation.License(); ok {
		if err := vehicledriver.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "VehicleDriver.license": %w`, err)}
		}
	}
	return nil
}

func (vduo *VehicleDriverUpdateOne) sqlSave(ctx context.Context) (_node *VehicleDriver, err error) {
	if err := vduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicledriver.Table, vehicledriver.Columns, sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt))
	id, ok := vduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VehicleDriver.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicledriver.FieldID)
		for _, f := range fields {
			if !vehicledriver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicledriver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vduo.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicledriver.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vduo.mutation.PhoneNumber(); ok {
		_spec.SetField(vehicledriver.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := vduo.mutation.FullName(); ok {
		_spec.SetField(vehicledriver.FieldFullName, field.TypeString, value)
	}
	if value, ok := vduo.mutation.Password(); ok {
		_spec.SetField(vehicledriver.FieldPassword, field.TypeString, value)
	}
	if value, ok := vduo.mutation.License(); ok {
		_spec.SetField(vehicledriver.FieldLicense, field.TypeEnum, value)
	}
	if vduo.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.TripsTable,
			Columns: []string{vehicledriver.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.RemovedTripsIDs(); len(nodes) > 0 && !vduo.mutation.TripsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.TripsTable,
			Columns: []string{vehicledriver.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.TripsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.TripsTable,
			Columns: []string{vehicledriver.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vduo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.SessionsTable,
			Columns: []string{vehicledriver.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !vduo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.SessionsTable,
			Columns: []string{vehicledriver.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.SessionsTable,
			Columns: []string{vehicledriver.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VehicleDriver{config: vduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicledriver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vduo.mutation.done = true
	return _node, nil
}
