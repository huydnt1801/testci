// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huydnt1801/chuyende/internal/ent/session"
	"github.com/huydnt1801/chuyende/internal/ent/trip"
	"github.com/huydnt1801/chuyende/internal/ent/vehicledriver"
)

// VehicleDriverCreate is the builder for creating a VehicleDriver entity.
type VehicleDriverCreate struct {
	config
	mutation *VehicleDriverMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vdc *VehicleDriverCreate) SetCreatedAt(t time.Time) *VehicleDriverCreate {
	vdc.mutation.SetCreatedAt(t)
	return vdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vdc *VehicleDriverCreate) SetNillableCreatedAt(t *time.Time) *VehicleDriverCreate {
	if t != nil {
		vdc.SetCreatedAt(*t)
	}
	return vdc
}

// SetUpdatedAt sets the "updated_at" field.
func (vdc *VehicleDriverCreate) SetUpdatedAt(t time.Time) *VehicleDriverCreate {
	vdc.mutation.SetUpdatedAt(t)
	return vdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vdc *VehicleDriverCreate) SetNillableUpdatedAt(t *time.Time) *VehicleDriverCreate {
	if t != nil {
		vdc.SetUpdatedAt(*t)
	}
	return vdc
}

// SetPhoneNumber sets the "phone_number" field.
func (vdc *VehicleDriverCreate) SetPhoneNumber(s string) *VehicleDriverCreate {
	vdc.mutation.SetPhoneNumber(s)
	return vdc
}

// SetFullName sets the "full_name" field.
func (vdc *VehicleDriverCreate) SetFullName(s string) *VehicleDriverCreate {
	vdc.mutation.SetFullName(s)
	return vdc
}

// SetPassword sets the "password" field.
func (vdc *VehicleDriverCreate) SetPassword(s string) *VehicleDriverCreate {
	vdc.mutation.SetPassword(s)
	return vdc
}

// SetLicense sets the "license" field.
func (vdc *VehicleDriverCreate) SetLicense(v vehicledriver.License) *VehicleDriverCreate {
	vdc.mutation.SetLicense(v)
	return vdc
}

// AddTripIDs adds the "trips" edge to the Trip entity by IDs.
func (vdc *VehicleDriverCreate) AddTripIDs(ids ...int) *VehicleDriverCreate {
	vdc.mutation.AddTripIDs(ids...)
	return vdc
}

// AddTrips adds the "trips" edges to the Trip entity.
func (vdc *VehicleDriverCreate) AddTrips(t ...*Trip) *VehicleDriverCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vdc.AddTripIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (vdc *VehicleDriverCreate) AddSessionIDs(ids ...int) *VehicleDriverCreate {
	vdc.mutation.AddSessionIDs(ids...)
	return vdc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (vdc *VehicleDriverCreate) AddSessions(s ...*Session) *VehicleDriverCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vdc.AddSessionIDs(ids...)
}

// Mutation returns the VehicleDriverMutation object of the builder.
func (vdc *VehicleDriverCreate) Mutation() *VehicleDriverMutation {
	return vdc.mutation
}

// Save creates the VehicleDriver in the database.
func (vdc *VehicleDriverCreate) Save(ctx context.Context) (*VehicleDriver, error) {
	vdc.defaults()
	return withHooks[*VehicleDriver, VehicleDriverMutation](ctx, vdc.sqlSave, vdc.mutation, vdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vdc *VehicleDriverCreate) SaveX(ctx context.Context) *VehicleDriver {
	v, err := vdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdc *VehicleDriverCreate) Exec(ctx context.Context) error {
	_, err := vdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdc *VehicleDriverCreate) ExecX(ctx context.Context) {
	if err := vdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdc *VehicleDriverCreate) defaults() {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		v := vehicledriver.DefaultCreatedAt()
		vdc.mutation.SetCreatedAt(v)
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		v := vehicledriver.DefaultUpdatedAt()
		vdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdc *VehicleDriverCreate) check() error {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VehicleDriver.created_at"`)}
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VehicleDriver.updated_at"`)}
	}
	if _, ok := vdc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "VehicleDriver.phone_number"`)}
	}
	if v, ok := vdc.mutation.PhoneNumber(); ok {
		if err := vehicledriver.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "VehicleDriver.phone_number": %w`, err)}
		}
	}
	if _, ok := vdc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "VehicleDriver.full_name"`)}
	}
	if _, ok := vdc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "VehicleDriver.password"`)}
	}
	if _, ok := vdc.mutation.License(); !ok {
		return &ValidationError{Name: "license", err: errors.New(`ent: missing required field "VehicleDriver.license"`)}
	}
	if v, ok := vdc.mutation.License(); ok {
		if err := vehicledriver.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "VehicleDriver.license": %w`, err)}
		}
	}
	return nil
}

func (vdc *VehicleDriverCreate) sqlSave(ctx context.Context) (*VehicleDriver, error) {
	if err := vdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vdc.mutation.id = &_node.ID
	vdc.mutation.done = true
	return _node, nil
}

func (vdc *VehicleDriverCreate) createSpec() (*VehicleDriver, *sqlgraph.CreateSpec) {
	var (
		_node = &VehicleDriver{config: vdc.config}
		_spec = sqlgraph.NewCreateSpec(vehicledriver.Table, sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vdc.conflict
	if value, ok := vdc.mutation.CreatedAt(); ok {
		_spec.SetField(vehicledriver.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vdc.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicledriver.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vdc.mutation.PhoneNumber(); ok {
		_spec.SetField(vehicledriver.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := vdc.mutation.FullName(); ok {
		_spec.SetField(vehicledriver.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := vdc.mutation.Password(); ok {
		_spec.SetField(vehicledriver.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := vdc.mutation.License(); ok {
		_spec.SetField(vehicledriver.FieldLicense, field.TypeEnum, value)
		_node.License = value
	}
	if nodes := vdc.mutation.TripsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.TripsTable,
			Columns: []string{vehicledriver.TripsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vdc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicledriver.SessionsTable,
			Columns: []string{vehicledriver.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VehicleDriver.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleDriverUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vdc *VehicleDriverCreate) OnConflict(opts ...sql.ConflictOption) *VehicleDriverUpsertOne {
	vdc.conflict = opts
	return &VehicleDriverUpsertOne{
		create: vdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VehicleDriver.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vdc *VehicleDriverCreate) OnConflictColumns(columns ...string) *VehicleDriverUpsertOne {
	vdc.conflict = append(vdc.conflict, sql.ConflictColumns(columns...))
	return &VehicleDriverUpsertOne{
		create: vdc,
	}
}

type (
	// VehicleDriverUpsertOne is the builder for "upsert"-ing
	//  one VehicleDriver node.
	VehicleDriverUpsertOne struct {
		create *VehicleDriverCreate
	}

	// VehicleDriverUpsert is the "OnConflict" setter.
	VehicleDriverUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleDriverUpsert) SetUpdatedAt(v time.Time) *VehicleDriverUpsert {
	u.Set(vehicledriver.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleDriverUpsert) UpdateUpdatedAt() *VehicleDriverUpsert {
	u.SetExcluded(vehicledriver.FieldUpdatedAt)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *VehicleDriverUpsert) SetPhoneNumber(v string) *VehicleDriverUpsert {
	u.Set(vehicledriver.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *VehicleDriverUpsert) UpdatePhoneNumber() *VehicleDriverUpsert {
	u.SetExcluded(vehicledriver.FieldPhoneNumber)
	return u
}

// SetFullName sets the "full_name" field.
func (u *VehicleDriverUpsert) SetFullName(v string) *VehicleDriverUpsert {
	u.Set(vehicledriver.FieldFullName, v)
	return u
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *VehicleDriverUpsert) UpdateFullName() *VehicleDriverUpsert {
	u.SetExcluded(vehicledriver.FieldFullName)
	return u
}

// SetPassword sets the "password" field.
func (u *VehicleDriverUpsert) SetPassword(v string) *VehicleDriverUpsert {
	u.Set(vehicledriver.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *VehicleDriverUpsert) UpdatePassword() *VehicleDriverUpsert {
	u.SetExcluded(vehicledriver.FieldPassword)
	return u
}

// SetLicense sets the "license" field.
func (u *VehicleDriverUpsert) SetLicense(v vehicledriver.License) *VehicleDriverUpsert {
	u.Set(vehicledriver.FieldLicense, v)
	return u
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *VehicleDriverUpsert) UpdateLicense() *VehicleDriverUpsert {
	u.SetExcluded(vehicledriver.FieldLicense)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VehicleDriver.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VehicleDriverUpsertOne) UpdateNewValues() *VehicleDriverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(vehicledriver.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VehicleDriver.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VehicleDriverUpsertOne) Ignore() *VehicleDriverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleDriverUpsertOne) DoNothing() *VehicleDriverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleDriverCreate.OnConflict
// documentation for more info.
func (u *VehicleDriverUpsertOne) Update(set func(*VehicleDriverUpsert)) *VehicleDriverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleDriverUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleDriverUpsertOne) SetUpdatedAt(v time.Time) *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleDriverUpsertOne) UpdateUpdatedAt() *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *VehicleDriverUpsertOne) SetPhoneNumber(v string) *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *VehicleDriverUpsertOne) UpdatePhoneNumber() *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetFullName sets the "full_name" field.
func (u *VehicleDriverUpsertOne) SetFullName(v string) *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *VehicleDriverUpsertOne) UpdateFullName() *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdateFullName()
	})
}

// SetPassword sets the "password" field.
func (u *VehicleDriverUpsertOne) SetPassword(v string) *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *VehicleDriverUpsertOne) UpdatePassword() *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdatePassword()
	})
}

// SetLicense sets the "license" field.
func (u *VehicleDriverUpsertOne) SetLicense(v vehicledriver.License) *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetLicense(v)
	})
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *VehicleDriverUpsertOne) UpdateLicense() *VehicleDriverUpsertOne {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdateLicense()
	})
}

// Exec executes the query.
func (u *VehicleDriverUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleDriverCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleDriverUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VehicleDriverUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VehicleDriverUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VehicleDriverCreateBulk is the builder for creating many VehicleDriver entities in bulk.
type VehicleDriverCreateBulk struct {
	config
	builders []*VehicleDriverCreate
	conflict []sql.ConflictOption
}

// Save creates the VehicleDriver entities in the database.
func (vdcb *VehicleDriverCreateBulk) Save(ctx context.Context) ([]*VehicleDriver, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vdcb.builders))
	nodes := make([]*VehicleDriver, len(vdcb.builders))
	mutators := make([]Mutator, len(vdcb.builders))
	for i := range vdcb.builders {
		func(i int, root context.Context) {
			builder := vdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleDriverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdcb *VehicleDriverCreateBulk) SaveX(ctx context.Context) []*VehicleDriver {
	v, err := vdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdcb *VehicleDriverCreateBulk) Exec(ctx context.Context) error {
	_, err := vdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdcb *VehicleDriverCreateBulk) ExecX(ctx context.Context) {
	if err := vdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VehicleDriver.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleDriverUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vdcb *VehicleDriverCreateBulk) OnConflict(opts ...sql.ConflictOption) *VehicleDriverUpsertBulk {
	vdcb.conflict = opts
	return &VehicleDriverUpsertBulk{
		create: vdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VehicleDriver.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vdcb *VehicleDriverCreateBulk) OnConflictColumns(columns ...string) *VehicleDriverUpsertBulk {
	vdcb.conflict = append(vdcb.conflict, sql.ConflictColumns(columns...))
	return &VehicleDriverUpsertBulk{
		create: vdcb,
	}
}

// VehicleDriverUpsertBulk is the builder for "upsert"-ing
// a bulk of VehicleDriver nodes.
type VehicleDriverUpsertBulk struct {
	create *VehicleDriverCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VehicleDriver.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VehicleDriverUpsertBulk) UpdateNewValues() *VehicleDriverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(vehicledriver.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VehicleDriver.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VehicleDriverUpsertBulk) Ignore() *VehicleDriverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleDriverUpsertBulk) DoNothing() *VehicleDriverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleDriverCreateBulk.OnConflict
// documentation for more info.
func (u *VehicleDriverUpsertBulk) Update(set func(*VehicleDriverUpsert)) *VehicleDriverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleDriverUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleDriverUpsertBulk) SetUpdatedAt(v time.Time) *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleDriverUpsertBulk) UpdateUpdatedAt() *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *VehicleDriverUpsertBulk) SetPhoneNumber(v string) *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *VehicleDriverUpsertBulk) UpdatePhoneNumber() *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetFullName sets the "full_name" field.
func (u *VehicleDriverUpsertBulk) SetFullName(v string) *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *VehicleDriverUpsertBulk) UpdateFullName() *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdateFullName()
	})
}

// SetPassword sets the "password" field.
func (u *VehicleDriverUpsertBulk) SetPassword(v string) *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *VehicleDriverUpsertBulk) UpdatePassword() *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdatePassword()
	})
}

// SetLicense sets the "license" field.
func (u *VehicleDriverUpsertBulk) SetLicense(v vehicledriver.License) *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.SetLicense(v)
	})
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *VehicleDriverUpsertBulk) UpdateLicense() *VehicleDriverUpsertBulk {
	return u.Update(func(s *VehicleDriverUpsert) {
		s.UpdateLicense()
	})
}

// Exec executes the query.
func (u *VehicleDriverUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VehicleDriverCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleDriverCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleDriverUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
