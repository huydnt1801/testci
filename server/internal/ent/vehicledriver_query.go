// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huydnt1801/chuyende/internal/ent/predicate"
	"github.com/huydnt1801/chuyende/internal/ent/session"
	"github.com/huydnt1801/chuyende/internal/ent/trip"
	"github.com/huydnt1801/chuyende/internal/ent/vehicledriver"
)

// VehicleDriverQuery is the builder for querying VehicleDriver entities.
type VehicleDriverQuery struct {
	config
	ctx          *QueryContext
	order        []vehicledriver.OrderOption
	inters       []Interceptor
	predicates   []predicate.VehicleDriver
	withTrips    *TripQuery
	withSessions *SessionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VehicleDriverQuery builder.
func (vdq *VehicleDriverQuery) Where(ps ...predicate.VehicleDriver) *VehicleDriverQuery {
	vdq.predicates = append(vdq.predicates, ps...)
	return vdq
}

// Limit the number of records to be returned by this query.
func (vdq *VehicleDriverQuery) Limit(limit int) *VehicleDriverQuery {
	vdq.ctx.Limit = &limit
	return vdq
}

// Offset to start from.
func (vdq *VehicleDriverQuery) Offset(offset int) *VehicleDriverQuery {
	vdq.ctx.Offset = &offset
	return vdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vdq *VehicleDriverQuery) Unique(unique bool) *VehicleDriverQuery {
	vdq.ctx.Unique = &unique
	return vdq
}

// Order specifies how the records should be ordered.
func (vdq *VehicleDriverQuery) Order(o ...vehicledriver.OrderOption) *VehicleDriverQuery {
	vdq.order = append(vdq.order, o...)
	return vdq
}

// QueryTrips chains the current query on the "trips" edge.
func (vdq *VehicleDriverQuery) QueryTrips() *TripQuery {
	query := (&TripClient{config: vdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicledriver.Table, vehicledriver.FieldID, selector),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehicledriver.TripsTable, vehicledriver.TripsColumn),
		)
		fromU = sqlgraph.SetNeighbors(vdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (vdq *VehicleDriverQuery) QuerySessions() *SessionQuery {
	query := (&SessionClient{config: vdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicledriver.Table, vehicledriver.FieldID, selector),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehicledriver.SessionsTable, vehicledriver.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(vdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VehicleDriver entity from the query.
// Returns a *NotFoundError when no VehicleDriver was found.
func (vdq *VehicleDriverQuery) First(ctx context.Context) (*VehicleDriver, error) {
	nodes, err := vdq.Limit(1).All(setContextOp(ctx, vdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vehicledriver.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vdq *VehicleDriverQuery) FirstX(ctx context.Context) *VehicleDriver {
	node, err := vdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VehicleDriver ID from the query.
// Returns a *NotFoundError when no VehicleDriver ID was found.
func (vdq *VehicleDriverQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vdq.Limit(1).IDs(setContextOp(ctx, vdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vehicledriver.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vdq *VehicleDriverQuery) FirstIDX(ctx context.Context) int {
	id, err := vdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VehicleDriver entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VehicleDriver entity is found.
// Returns a *NotFoundError when no VehicleDriver entities are found.
func (vdq *VehicleDriverQuery) Only(ctx context.Context) (*VehicleDriver, error) {
	nodes, err := vdq.Limit(2).All(setContextOp(ctx, vdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vehicledriver.Label}
	default:
		return nil, &NotSingularError{vehicledriver.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vdq *VehicleDriverQuery) OnlyX(ctx context.Context) *VehicleDriver {
	node, err := vdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VehicleDriver ID in the query.
// Returns a *NotSingularError when more than one VehicleDriver ID is found.
// Returns a *NotFoundError when no entities are found.
func (vdq *VehicleDriverQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vdq.Limit(2).IDs(setContextOp(ctx, vdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vehicledriver.Label}
	default:
		err = &NotSingularError{vehicledriver.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vdq *VehicleDriverQuery) OnlyIDX(ctx context.Context) int {
	id, err := vdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VehicleDrivers.
func (vdq *VehicleDriverQuery) All(ctx context.Context) ([]*VehicleDriver, error) {
	ctx = setContextOp(ctx, vdq.ctx, "All")
	if err := vdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VehicleDriver, *VehicleDriverQuery]()
	return withInterceptors[[]*VehicleDriver](ctx, vdq, qr, vdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vdq *VehicleDriverQuery) AllX(ctx context.Context) []*VehicleDriver {
	nodes, err := vdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VehicleDriver IDs.
func (vdq *VehicleDriverQuery) IDs(ctx context.Context) (ids []int, err error) {
	if vdq.ctx.Unique == nil && vdq.path != nil {
		vdq.Unique(true)
	}
	ctx = setContextOp(ctx, vdq.ctx, "IDs")
	if err = vdq.Select(vehicledriver.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vdq *VehicleDriverQuery) IDsX(ctx context.Context) []int {
	ids, err := vdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vdq *VehicleDriverQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vdq.ctx, "Count")
	if err := vdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vdq, querierCount[*VehicleDriverQuery](), vdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vdq *VehicleDriverQuery) CountX(ctx context.Context) int {
	count, err := vdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vdq *VehicleDriverQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vdq.ctx, "Exist")
	switch _, err := vdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vdq *VehicleDriverQuery) ExistX(ctx context.Context) bool {
	exist, err := vdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VehicleDriverQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vdq *VehicleDriverQuery) Clone() *VehicleDriverQuery {
	if vdq == nil {
		return nil
	}
	return &VehicleDriverQuery{
		config:       vdq.config,
		ctx:          vdq.ctx.Clone(),
		order:        append([]vehicledriver.OrderOption{}, vdq.order...),
		inters:       append([]Interceptor{}, vdq.inters...),
		predicates:   append([]predicate.VehicleDriver{}, vdq.predicates...),
		withTrips:    vdq.withTrips.Clone(),
		withSessions: vdq.withSessions.Clone(),
		// clone intermediate query.
		sql:  vdq.sql.Clone(),
		path: vdq.path,
	}
}

// WithTrips tells the query-builder to eager-load the nodes that are connected to
// the "trips" edge. The optional arguments are used to configure the query builder of the edge.
func (vdq *VehicleDriverQuery) WithTrips(opts ...func(*TripQuery)) *VehicleDriverQuery {
	query := (&TripClient{config: vdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vdq.withTrips = query
	return vdq
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (vdq *VehicleDriverQuery) WithSessions(opts ...func(*SessionQuery)) *VehicleDriverQuery {
	query := (&SessionClient{config: vdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vdq.withSessions = query
	return vdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VehicleDriver.Query().
//		GroupBy(vehicledriver.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vdq *VehicleDriverQuery) GroupBy(field string, fields ...string) *VehicleDriverGroupBy {
	vdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VehicleDriverGroupBy{build: vdq}
	grbuild.flds = &vdq.ctx.Fields
	grbuild.label = vehicledriver.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VehicleDriver.Query().
//		Select(vehicledriver.FieldCreatedAt).
//		Scan(ctx, &v)
func (vdq *VehicleDriverQuery) Select(fields ...string) *VehicleDriverSelect {
	vdq.ctx.Fields = append(vdq.ctx.Fields, fields...)
	sbuild := &VehicleDriverSelect{VehicleDriverQuery: vdq}
	sbuild.label = vehicledriver.Label
	sbuild.flds, sbuild.scan = &vdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VehicleDriverSelect configured with the given aggregations.
func (vdq *VehicleDriverQuery) Aggregate(fns ...AggregateFunc) *VehicleDriverSelect {
	return vdq.Select().Aggregate(fns...)
}

func (vdq *VehicleDriverQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vdq); err != nil {
				return err
			}
		}
	}
	for _, f := range vdq.ctx.Fields {
		if !vehicledriver.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vdq.path != nil {
		prev, err := vdq.path(ctx)
		if err != nil {
			return err
		}
		vdq.sql = prev
	}
	return nil
}

func (vdq *VehicleDriverQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VehicleDriver, error) {
	var (
		nodes       = []*VehicleDriver{}
		_spec       = vdq.querySpec()
		loadedTypes = [2]bool{
			vdq.withTrips != nil,
			vdq.withSessions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VehicleDriver).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VehicleDriver{config: vdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vdq.withTrips; query != nil {
		if err := vdq.loadTrips(ctx, query, nodes,
			func(n *VehicleDriver) { n.Edges.Trips = []*Trip{} },
			func(n *VehicleDriver, e *Trip) { n.Edges.Trips = append(n.Edges.Trips, e) }); err != nil {
			return nil, err
		}
	}
	if query := vdq.withSessions; query != nil {
		if err := vdq.loadSessions(ctx, query, nodes,
			func(n *VehicleDriver) { n.Edges.Sessions = []*Session{} },
			func(n *VehicleDriver, e *Session) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vdq *VehicleDriverQuery) loadTrips(ctx context.Context, query *TripQuery, nodes []*VehicleDriver, init func(*VehicleDriver), assign func(*VehicleDriver, *Trip)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*VehicleDriver)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(trip.FieldDriverID)
	}
	query.Where(predicate.Trip(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vehicledriver.TripsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.DriverID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "driver_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vdq *VehicleDriverQuery) loadSessions(ctx context.Context, query *SessionQuery, nodes []*VehicleDriver, init func(*VehicleDriver), assign func(*VehicleDriver, *Session)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*VehicleDriver)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(session.FieldDriverID)
	}
	query.Where(predicate.Session(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vehicledriver.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.DriverID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "driver_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vdq *VehicleDriverQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vdq.querySpec()
	_spec.Node.Columns = vdq.ctx.Fields
	if len(vdq.ctx.Fields) > 0 {
		_spec.Unique = vdq.ctx.Unique != nil && *vdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vdq.driver, _spec)
}

func (vdq *VehicleDriverQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(vehicledriver.Table, vehicledriver.Columns, sqlgraph.NewFieldSpec(vehicledriver.FieldID, field.TypeInt))
	_spec.From = vdq.sql
	if unique := vdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vdq.path != nil {
		_spec.Unique = true
	}
	if fields := vdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicledriver.FieldID)
		for i := range fields {
			if fields[i] != vehicledriver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vdq *VehicleDriverQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vdq.driver.Dialect())
	t1 := builder.Table(vehicledriver.Table)
	columns := vdq.ctx.Fields
	if len(columns) == 0 {
		columns = vehicledriver.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vdq.sql != nil {
		selector = vdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vdq.ctx.Unique != nil && *vdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vdq.predicates {
		p(selector)
	}
	for _, p := range vdq.order {
		p(selector)
	}
	if offset := vdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VehicleDriverGroupBy is the group-by builder for VehicleDriver entities.
type VehicleDriverGroupBy struct {
	selector
	build *VehicleDriverQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vdgb *VehicleDriverGroupBy) Aggregate(fns ...AggregateFunc) *VehicleDriverGroupBy {
	vdgb.fns = append(vdgb.fns, fns...)
	return vdgb
}

// Scan applies the selector query and scans the result into the given value.
func (vdgb *VehicleDriverGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vdgb.build.ctx, "GroupBy")
	if err := vdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VehicleDriverQuery, *VehicleDriverGroupBy](ctx, vdgb.build, vdgb, vdgb.build.inters, v)
}

func (vdgb *VehicleDriverGroupBy) sqlScan(ctx context.Context, root *VehicleDriverQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vdgb.fns))
	for _, fn := range vdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vdgb.flds)+len(vdgb.fns))
		for _, f := range *vdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VehicleDriverSelect is the builder for selecting fields of VehicleDriver entities.
type VehicleDriverSelect struct {
	*VehicleDriverQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vds *VehicleDriverSelect) Aggregate(fns ...AggregateFunc) *VehicleDriverSelect {
	vds.fns = append(vds.fns, fns...)
	return vds
}

// Scan applies the selector query and scans the result into the given value.
func (vds *VehicleDriverSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vds.ctx, "Select")
	if err := vds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VehicleDriverQuery, *VehicleDriverSelect](ctx, vds.VehicleDriverQuery, vds, vds.inters, v)
}

func (vds *VehicleDriverSelect) sqlScan(ctx context.Context, root *VehicleDriverQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vds.fns))
	for _, fn := range vds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
